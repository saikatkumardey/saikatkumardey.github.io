<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Saikat Kumar Dey</title><link>https://saikatkumardey.com/categories/python/</link><description>python</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 28 Sep 2021 10:06:23 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Pandas Dataframes From Ndarrays</title><link>https://saikatkumardey.com/posts/building-pandas-dataframes-from-ndarrays/</link><pubDate>Tue, 28 Sep 2021 10:06:23 +0530</pubDate><guid>https://saikatkumardey.com/posts/building-pandas-dataframes-from-ndarrays/</guid><description>&lt;div class="toc">
&lt;h3>Table of contents&lt;/h3>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#1d--dimension--sales">1d : dimension = sales&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2d-dimension--sales--product">2d: dimension = sales * product&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3d--dimension--location-x-product-x-sales">3d : dimension = location x product x sales&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3d--dimension--location-x-product-x-sales-multi">3d : dimension = location x product x sales (multi)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;p>At work, I have to switch between numpy &amp;amp; pandas depending on the computational needs. Numpy is faster. Pandas is easier to work with.&lt;/p>
&lt;p>One of the tasks I&amp;rsquo;ve faced often was to convert a 3-dimensional ndarray to a pandas dataframe. I will share my preferred technique in this post today.&lt;/p>
&lt;p>For the purpose of this exercise, I&amp;rsquo;ll generate dummy sales data for a retail company. The dimensions include products, locations, and sales.&lt;/p>
&lt;h1 id="convert-ndarray-to-pandas-dataframe">Convert ndarray to pandas dataframe&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1d--dimension--sales">1d : dimension = sales&lt;/h2>
&lt;p>Let&amp;rsquo;s start with 1d data. What if we only had sales info for all products and locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arr_1d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">randint&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">low&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">high&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">arr_1d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[9 3 6]
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s easy. Ideally, 1-d information should be represented as a Series.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_1d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(&lt;span style="color:#000">arr_1d&lt;/span>, &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">df_1d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
0 9
1 3
2 6
&lt;/code>&lt;/pre>
&lt;h2 id="2d-dimension--sales--product">2d: dimension = sales * product&lt;/h2>
&lt;p>Let&amp;rsquo;s move on to 2 dimensions. Now, we have data corresponding to different products.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arr_2d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">randint&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">low&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">high&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">arr_2d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[4 6]
[8 1]
[2 7]]
&lt;/code>&lt;/pre>
&lt;p>Pandas DataFrame can handle 2-D ndarrays out of the box.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_2d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(&lt;span style="color:#000">arr_2d&lt;/span>, &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>])&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">set_index&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">df_2d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
product
4 6
8 1
2 7
&lt;/code>&lt;/pre>
&lt;h2 id="3d--dimension--location-x-product-x-sales">3d : dimension = location x product x sales&lt;/h2>
&lt;p>Now, what if we have a ndarray corresponding to all products for several locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># failure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arr_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">randint&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">low&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">high&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">arr_3d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[9]
[6]
[2]]
[[1]
[4]
[4]]
[[2]
[5]
[6]]
[[9]
[6]
[5]]
[[1]
[6]
[1]]]
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># the following raises ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># pandas DataFrame expects a 2-d input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(&lt;span style="color:#000">arr_3d&lt;/span>, &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pandas won&amp;rsquo;t work out of the box. It cannot handle more than 2 dimensions. So, it raises a &lt;code>ValueError&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bas" data-lang="bas">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ValueError&lt;/span> &lt;span style="color:#000">Traceback&lt;/span> (&lt;span style="color:#000">most&lt;/span> &lt;span style="color:#000">recent&lt;/span> &lt;span style="color:#000">call&lt;/span> &lt;span style="color:#000">last&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">folders&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">jq&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">ksxbjg7d58g9v9rrcl0f38380000gn&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">ipykernel_12628&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#1c01ce">1531564731&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">py&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">module&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">following&lt;/span> &lt;span style="color:#000">raises&lt;/span> &lt;span style="color:#000">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#000">DataFrame&lt;/span> &lt;span style="color:#000">expects&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#000">input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">----&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">df_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(&lt;span style="color:#000">arr_3d&lt;/span>, &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ValueError:&lt;/span> &lt;span style="color:#000">Must&lt;/span> &lt;span style="color:#000">pass&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000">.&lt;/span> &lt;span style="color:#000">shape&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The solution?&lt;/p>
&lt;p>&lt;code>MultiIndex&lt;/code>.&lt;/p>
&lt;p>Assuming that the ndarray is ordered by location/products, we could prepare a multi-index, flatten our ndarray and let Pandas reshape it according to the provided index.&lt;/p>
&lt;p>Sweet!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">index&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">MultiIndex&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">from_product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#000">dim&lt;/span>) &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">dim&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">arr_3d&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>[:&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>]],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(&lt;span style="color:#000">arr_3d&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">flatten&lt;/span>(), &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">index&lt;/span>, &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">df_3d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
location product
0 0 9
1 6
2 2
1 0 1
1 4
2 4
2 0 2
1 5
2 6
3 0 9
1 6
2 5
4 0 1
1 6
2 1
&lt;/code>&lt;/pre>
&lt;p>We just have sales corresponding to each location and product. What if the final &lt;code>sales&lt;/code> dimension includes sales for yesterday/today (or for every month, every week, etc.) ?&lt;/p>
&lt;h2 id="3d--dimension--location-x-product-x-sales-multi">3d : dimension = location x product x sales (multi)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arr_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">randint&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">low&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">high&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">arr_3d&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">index&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">MultiIndex&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">from_product&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#000">dim&lt;/span>) &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">dim&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">arr_3d&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">shape&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[1 9]
[8 6]
[9 4]]
[[4 9]
[3 9]
[1 8]]
[[5 2]
[9 9]
[1 9]]
[[4 5]
[7 4]
[7 7]]
[[6 9]
[4 2]
[7 1]]]
&lt;/code>&lt;/pre>
&lt;p>No major changes. Pandas should handle it just like before. Just unstack the sales dimension and rename the columns for readability.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">arr_3d&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">flatten&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">index&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">df_3d&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">df_3d&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">unstack&lt;/span>(&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>)&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">rename&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">columns&lt;/span>&lt;span style="color:#000">=&lt;/span>{&lt;span style="color:#1c01ce">0&lt;/span>: &lt;span style="color:#c41a16">&amp;#34;yesterday&amp;#34;&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>: &lt;span style="color:#c41a16">&amp;#34;today&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">df_3d&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> sales yesterday today
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0 0 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 8 6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 9 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 0 4 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 3 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 0 5 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 9 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3 0 4 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 7 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 4 0 6 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 4 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Do you know of other ways to switch between ndarray and DataFrame? Comment below :)&lt;/p></description></item></channel></rss>