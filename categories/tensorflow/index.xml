<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tensorflow on Saikat Kumar Dey</title><link>https://saikatkumardey.com/categories/tensorflow/</link><description>tensorflow</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 25 Jun 2022 13:06:10 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/categories/tensorflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Memory-efficient scikeras model training</title><link>https://saikatkumardey.com/essays/scikeras/</link><pubDate>Sat, 25 Jun 2022 13:06:10 +0530</pubDate><guid>https://saikatkumardey.com/essays/scikeras/</guid><description>&lt;p>I want to train an image classification model using scikeras interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Scikeras is a wrapper that allows us to combine Tensorflow with sklearn.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have a dataset of images on my disk which I would like to use for training.&lt;/p>
&lt;p>Tensorflow has &lt;a href="https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator">ImageDataGenerator()&lt;/a> which allows us to load images in batches and apply augmentation (rotation, flipping, zoom,scaling) in real-time.&lt;/p>
&lt;p>scikeras exposes &lt;a href="https://www.adriangb.com/scikeras/stable/generated/scikeras.wrappers.BaseWrapper.html">KerasClassifier()&lt;/a> which is scikit-learn compatible API for model training.&lt;/p>
&lt;p>&lt;code>model.fit()&lt;/code> in scikit-learn expects the entire dataset to be loaded in memory.&lt;/p>
&lt;p>&lt;strong>If our image dataset is huge, our RAM will not be able to hold all of it in memory.&lt;/strong>&lt;/p>
&lt;p>So, we would like to use &lt;code>partial_fit()&lt;/code> with smaller batches of images generated by ImageDataGenerator. &lt;code>partial_fit()&lt;/code> also keeps the history of model weights and parameters. &lt;code>fit()&lt;/code> resets it every time it&amp;rsquo;s called.&lt;/p>
&lt;p>Let&amp;rsquo;s begin.&lt;/p>
&lt;h2 id="download-dataset">Download dataset&lt;/h2>
&lt;p>Download a sample &lt;a href="https://www.kaggle.com/datasets/muratkokludataset/pistachio-image-dataset">dataset&lt;/a> and store the dataset in &lt;code>data/&lt;/code>. Your directory structure should look like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>data/Pistachio_Image_Dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Kirmizi_Pistachio/*.jpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Siirt_Pistachio/*.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import-necessary-libraries">Import necessary libraries&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">from&lt;/span> math &lt;span style="color:#719e07">import&lt;/span> ceil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">import&lt;/span> tensorflow &lt;span style="color:#719e07">as&lt;/span> tf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">from&lt;/span> matplotlib &lt;span style="color:#719e07">import&lt;/span> pyplot &lt;span style="color:#719e07">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">from&lt;/span> scikeras.wrappers &lt;span style="color:#719e07">import&lt;/span> KerasClassifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">from&lt;/span> tensorflow.keras.preprocessing.image &lt;span style="color:#719e07">import&lt;/span> ImageDataGenerator
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-constants">Setup Constants&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>DATA_DIR &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">&amp;#34;data/Pistachio_Image_Dataset&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BATCH_SIZE &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPOCHS &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loader-for-reading-data-in-batches">Loader for reading data in batches&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>image_generator &lt;span style="color:#719e07">=&lt;/span> ImageDataGenerator(rescale&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1.0&lt;/span> &lt;span style="color:#719e07">/&lt;/span> &lt;span style="color:#2aa198">255&lt;/span>)&lt;span style="color:#719e07">.&lt;/span>flow_from_directory(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATA_DIR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">32&lt;/span>, &lt;span style="color:#2aa198">32&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch_size&lt;span style="color:#719e07">=&lt;/span>BATCH_SIZE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_mode&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;binary&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total_images &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#b58900">len&lt;/span>(image_generator&lt;span style="color:#719e07">.&lt;/span>filenames)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total_batches &lt;span style="color:#719e07">=&lt;/span> ceil(total_images &lt;span style="color:#719e07">//&lt;/span> BATCH_SIZE)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="define-your-tensorflow-model-architecture">Define your Tensorflow model architecture&lt;/h2>
&lt;p>We&amp;rsquo;ll use a shallow-net for demonstration purposes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>model &lt;span style="color:#719e07">=&lt;/span> tf&lt;span style="color:#719e07">.&lt;/span>keras&lt;span style="color:#719e07">.&lt;/span>Sequential(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tf&lt;span style="color:#719e07">.&lt;/span>keras&lt;span style="color:#719e07">.&lt;/span>layers&lt;span style="color:#719e07">.&lt;/span>Input(shape&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">32&lt;/span>, &lt;span style="color:#2aa198">32&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tf&lt;span style="color:#719e07">.&lt;/span>keras&lt;span style="color:#719e07">.&lt;/span>layers&lt;span style="color:#719e07">.&lt;/span>Flatten(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tf&lt;span style="color:#719e07">.&lt;/span>keras&lt;span style="color:#719e07">.&lt;/span>layers&lt;span style="color:#719e07">.&lt;/span>Dense(&lt;span style="color:#2aa198">1&lt;/span>, activation&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;sigmoid&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="define-scikeras-interface">Define scikeras interface&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sk_clf &lt;span style="color:#719e07">=&lt;/span> KerasClassifier(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> model&lt;span style="color:#719e07">=&lt;/span>model,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> optimizer&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;adam&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loss&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;binary_crossentropy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metrics&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;accuracy&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="training-loop">Training loop&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>batch &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>epoch &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>histories &lt;span style="color:#719e07">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">for&lt;/span> X, y &lt;span style="color:#719e07">in&lt;/span> image_generator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sk_clf&lt;span style="color:#719e07">.&lt;/span>partial_fit(X, y, verbose&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#cb4b16">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> history &lt;span style="color:#719e07">=&lt;/span> sk_clf&lt;span style="color:#719e07">.&lt;/span>model_&lt;span style="color:#719e07">.&lt;/span>history&lt;span style="color:#719e07">.&lt;/span>history
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> histories&lt;span style="color:#719e07">.&lt;/span>append(history)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch &lt;span style="color:#719e07">+=&lt;/span> &lt;span style="color:#2aa198">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">if&lt;/span> batch &lt;span style="color:#719e07">==&lt;/span> total_batches:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> epoch &lt;span style="color:#719e07">+=&lt;/span> &lt;span style="color:#2aa198">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b58900">print&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">f&lt;/span>&lt;span style="color:#2aa198">&amp;#34;epoch &lt;/span>&lt;span style="color:#2aa198">{&lt;/span>epoch&lt;span style="color:#2aa198">}&lt;/span>&lt;span style="color:#2aa198">/&lt;/span>&lt;span style="color:#2aa198">{&lt;/span>EPOCHS&lt;span style="color:#2aa198">}&lt;/span>&lt;span style="color:#2aa198">, loss &lt;/span>&lt;span style="color:#2aa198">{&lt;/span>history[&lt;span style="color:#2aa198">&amp;#39;loss&amp;#39;&lt;/span>][&lt;span style="color:#2aa198">0&lt;/span>]&lt;span style="color:#2aa198">}&lt;/span>&lt;span style="color:#2aa198"> accuracy &lt;/span>&lt;span style="color:#2aa198">{&lt;/span>history[&lt;span style="color:#2aa198">&amp;#39;accuracy&amp;#39;&lt;/span>][&lt;span style="color:#2aa198">0&lt;/span>]&lt;span style="color:#2aa198">}&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">if&lt;/span> epoch &lt;span style="color:#719e07">==&lt;/span> EPOCHS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">break&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>