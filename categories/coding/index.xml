<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on Saikat Kumar Dey</title><link>https://saikatkumardey.com/categories/coding/</link><description>coding</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 01 Jun 2022 23:34:18 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>pre-commit hooks</title><link>https://saikatkumardey.com/daily/8-pre-commit-hooks/</link><pubDate>Wed, 01 Jun 2022 23:34:18 +0530</pubDate><guid>https://saikatkumardey.com/daily/8-pre-commit-hooks/</guid><description>&lt;p>Code smells should be identified before they&amp;rsquo;re pushed committed.&lt;/p>
&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> hooks allow you to define a standard for your codebase.&lt;/p>
&lt;p>You don&amp;rsquo;t need to worry if the latest PR follows the &lt;a href="https://peps.python.org/pep-0008/">PEP 8&lt;/a> conventions. Simply add a &lt;a href="https://github.com/PyCQA/flake8">flake8&lt;/a> hook to your pre-commit config file. Even better, add a &lt;a href="https://github.com/psf/black">black&lt;/a> config to ensure your code formatting is PEP 8 compliant.&lt;/p>
&lt;p>Accidentally added a large-file to staging? No problem, pre-commit hooks will point it out.&lt;/p>
&lt;p>Forgot to remove debug statements in your latest patch? pre-commit hooks got you!&lt;/p>
&lt;p>Forgot to add a huge file from staging? pre-commit hook will help you!&lt;/p>
&lt;p>pre-commit hooks will prevent anyone from committing changes to your code-base with such known issues.&lt;/p>
&lt;p>It will allow the reviewers to focus on core contribution of a pull-request instead of trivial issues which could be avoided.&lt;/p>
&lt;p>What are you waiting for ? Go get yourself some &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> hooks for your freshly minted repository!&lt;/p></description></item><item><title>Building Pandas Dataframes From Ndarrays</title><link>https://saikatkumardey.com/essays/building-pandas-dataframes-from-ndarrays/</link><pubDate>Tue, 28 Sep 2021 10:06:23 +0530</pubDate><guid>https://saikatkumardey.com/essays/building-pandas-dataframes-from-ndarrays/</guid><description>&lt;p>At work, I have to switch between numpy &amp;amp; pandas depending on the computational needs. Numpy is faster. Pandas is easier to work with.&lt;/p>
&lt;p>One of the tasks I&amp;rsquo;ve faced often was to convert a 3-dimensional ndarray to a pandas dataframe. I will share my preferred technique in this post today.&lt;/p>
&lt;p>For the purpose of this exercise, I&amp;rsquo;ll generate dummy sales data for a retail company. The dimensions include products, locations, and sales.&lt;/p>
&lt;h1 id="convert-ndarray-to-pandas-dataframe">Convert ndarray to pandas dataframe&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">import&lt;/span> pandas &lt;span style="color:#719e07">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">import&lt;/span> numpy &lt;span style="color:#719e07">as&lt;/span> np
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1d--dimension--sales">1d : dimension = sales&lt;/h2>
&lt;p>Let&amp;rsquo;s start with 1d data. What if we only had sales info for all products and locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_1d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_1d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[9 3 6]
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s easy. Ideally, 1-d information should be represented as a Series.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_1d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_1d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_1d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
0 9
1 3
2 6
&lt;/code>&lt;/pre>
&lt;h2 id="2d-dimension--sales--product">2d: dimension = sales * product&lt;/h2>
&lt;p>Let&amp;rsquo;s move on to 2 dimensions. Now, we have data corresponding to different products.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_2d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_2d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[4 6]
[8 1]
[2 7]]
&lt;/code>&lt;/pre>
&lt;p>Pandas DataFrame can handle 2-D ndarrays out of the box.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_2d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_2d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])&lt;span style="color:#719e07">.&lt;/span>set_index(&lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_2d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
product
4 6
8 1
2 7
&lt;/code>&lt;/pre>
&lt;h2 id="3d--dimension--location-x-product-x-sales">3d : dimension = location x product x sales&lt;/h2>
&lt;p>Now, what if we have a ndarray corresponding to all products for several locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># failure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr_3d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[9]
[6]
[2]]
[[1]
[4]
[4]]
[[2]
[5]
[6]]
[[9]
[6]
[5]]
[[1]
[6]
[1]]]
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># the following raises ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># pandas DataFrame expects a 2-d input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pandas won&amp;rsquo;t work out of the box. It cannot handle more than 2 dimensions. So, it raises a &lt;code>ValueError&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bas" data-lang="bas">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueError Traceback (most recent call last)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">/&lt;/span>var&lt;span style="color:#719e07">/&lt;/span>folders&lt;span style="color:#719e07">/&lt;/span>jq&lt;span style="color:#719e07">/&lt;/span>ksxbjg7d58g9v9rrcl0f38380000gn&lt;span style="color:#719e07">/&lt;/span>T&lt;span style="color:#719e07">/&lt;/span>ipykernel_12628&lt;span style="color:#719e07">/&lt;/span>&lt;span style="color:#2aa198">1531564731&lt;/span>&lt;span style="color:#719e07">.&lt;/span>py in &lt;span style="color:#719e07">&amp;lt;&lt;/span>module&lt;span style="color:#719e07">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">1&lt;/span> # the following raises ValueError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">2&lt;/span> # pandas DataFrame expects a &lt;span style="color:#2aa198">2&lt;/span>&lt;span style="color:#719e07">-&lt;/span>d input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">----&amp;gt;&lt;/span> &lt;span style="color:#2aa198">3&lt;/span> df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueError: Must pass &lt;span style="color:#2aa198">2&lt;/span>&lt;span style="color:#719e07">-&lt;/span>d input&lt;span style="color:#719e07">.&lt;/span> shape&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The solution?&lt;/p>
&lt;p>&lt;code>MultiIndex&lt;/code>.&lt;/p>
&lt;p>Assuming that the ndarray is ordered by location/products, we could prepare a multi-index, flatten our ndarray and let Pandas reshape it according to the provided index.&lt;/p>
&lt;p>Sweet!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>index &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>MultiIndex&lt;span style="color:#719e07">.&lt;/span>from_product(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#b58900">range&lt;/span>(dim) &lt;span style="color:#719e07">for&lt;/span> dim &lt;span style="color:#719e07">in&lt;/span> arr_3d&lt;span style="color:#719e07">.&lt;/span>shape[:&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>]],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> names&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d&lt;span style="color:#719e07">.&lt;/span>flatten(), index&lt;span style="color:#719e07">=&lt;/span>index, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
location product
0 0 9
1 6
2 2
1 0 1
1 4
2 4
2 0 2
1 5
2 6
3 0 9
1 6
2 5
4 0 1
1 6
2 1
&lt;/code>&lt;/pre>
&lt;p>We just have sales corresponding to each location and product. What if the final &lt;code>sales&lt;/code> dimension includes sales for yesterday/today (or for every month, every week, etc.) ?&lt;/p>
&lt;h2 id="3d--dimension--location-x-product-x-sales-multi">3d : dimension = location x product x sales (multi)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_3d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_3d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>MultiIndex&lt;span style="color:#719e07">.&lt;/span>from_product(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#b58900">range&lt;/span>(dim) &lt;span style="color:#719e07">for&lt;/span> dim &lt;span style="color:#719e07">in&lt;/span> arr_3d&lt;span style="color:#719e07">.&lt;/span>shape],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> names&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[1 9]
[8 6]
[9 4]]
[[4 9]
[3 9]
[1 8]]
[[5 2]
[9 9]
[1 9]]
[[4 5]
[7 4]
[7 7]]
[[6 9]
[4 2]
[7 1]]]
&lt;/code>&lt;/pre>
&lt;p>No major changes. Pandas should handle it just like before. Just unstack the sales dimension and rename the columns for readability.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_3d&lt;span style="color:#719e07">.&lt;/span>flatten(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#719e07">=&lt;/span>index,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> df_3d&lt;span style="color:#719e07">.&lt;/span>unstack(&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>)&lt;span style="color:#719e07">.&lt;/span>rename(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> columns&lt;span style="color:#719e07">=&lt;/span>{&lt;span style="color:#2aa198">0&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;yesterday&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;today&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> sales yesterday today
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0 0 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 8 6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 9 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 0 4 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 3 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 0 5 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 9 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3 0 4 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 7 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 4 0 6 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 4 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Do you know of other ways to switch between ndarray and DataFrame? Comment below :)&lt;/p></description></item></channel></rss>