<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on Saikat Kumar Dey</title><link>https://saikatkumardey.com/categories/coding/</link><description>Recent content in coding on Saikat Kumar Dey</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>sample@gmail.com (Saikat Kumar Dey)</managingEditor><webMaster>sample@gmail.com (Saikat Kumar Dey)</webMaster><lastBuildDate>Thu, 01 Dec 2022 10:25:29 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering Common Patterns to Solve Leetcode Problems</title><link>https://saikatkumardey.com/post/leetcode-patterns/</link><pubDate>Thu, 01 Dec 2022 10:25:29 +0530</pubDate><author>sample@gmail.com (Saikat Kumar Dey)</author><guid>https://saikatkumardey.com/post/leetcode-patterns/</guid><description>In this post, I will introduce you to 14 important patterns that can help you solve most of the problems on Leetcode. I will provide a template for each pattern to help you quickly apply it to a problem, as well as a list of important problems to practice with. By the end of this post, you will have a powerful set of tools to enhance your problem-solving skills on Leetcode and beyond.</description></item><item><title>pre-commit hooks</title><link>https://saikatkumardey.com/post/8-pre-commit-hooks/</link><pubDate>Wed, 01 Jun 2022 23:34:18 +0530</pubDate><author>sample@gmail.com (Saikat Kumar Dey)</author><guid>https://saikatkumardey.com/post/8-pre-commit-hooks/</guid><description>Code smells should be identified before they&amp;rsquo;re pushed committed.
pre-commit hooks allow you to define a standard for your codebase.
You don&amp;rsquo;t need to worry if the latest PR follows the PEP 8 conventions. Simply add a flake8 hook to your pre-commit config file. Even better, add a black config to ensure your code formatting is PEP 8 compliant.
Accidentally added a large-file to staging? No problem, pre-commit hooks will point it out.</description></item><item><title>Building Pandas Dataframes From Ndarrays</title><link>https://saikatkumardey.com/post/building-pandas-dataframes-from-ndarrays/</link><pubDate>Tue, 28 Sep 2021 10:06:23 +0530</pubDate><author>sample@gmail.com (Saikat Kumar Dey)</author><guid>https://saikatkumardey.com/post/building-pandas-dataframes-from-ndarrays/</guid><description>At work, I have to switch between numpy &amp;amp; pandas depending on the computational needs. Numpy is faster. Pandas is easier to work with.
One of the tasks I&amp;rsquo;ve faced often was to convert a 3-dimensional ndarray to a pandas dataframe. I will share my preferred technique in this post today.
For the purpose of this exercise, I&amp;rsquo;ll generate dummy sales data for a retail company. The dimensions include products, locations, and sales.</description></item><item><title>A Simplified Implementation of Quicksort</title><link>https://saikatkumardey.com/post/a-simplified-implementation-of-quicksort/</link><pubDate>Sun, 05 Sep 2021 09:59:45 +0530</pubDate><author>sample@gmail.com (Saikat Kumar Dey)</author><guid>https://saikatkumardey.com/post/a-simplified-implementation-of-quicksort/</guid><description>Quicksort is a beautiful algorithm. It&amp;rsquo;s considered the fastest sorting algorithm in practice. Most implementations I&amp;rsquo;ve seen online are complicated. This post will demonstrate a simple implementation that trades space complexity for readability.
How does quicksort work? 3 steps.
Choose a pivot element. Partition: Put all elements smaller than the pivot in a smaller array, (say, smaller_subarray). Put all elements greater than the pivot in another array (say, greater_subarray). Recurse &amp;amp; Merge: Recursively sort the smaller and greater sub-arrays.</description></item></channel></rss>