<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Saikat Kumar Dey</title><link>https://saikatkumardey.com/</link><description>Saikat Kumar Dey</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 02 Dec 2022 11:15:58 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Side-Projects</title><link>https://saikatkumardey.com/projects/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><guid>https://saikatkumardey.com/projects/</guid><description>&lt;h2 id="conversohttpsconversome">&lt;a href="https://converso.me/">Converso&lt;/a>&lt;/h2>
&lt;p>Converso is a chatbot that matches your mood. Chat with Converso on Telegram and choose from 10 different personalities.&lt;/p>
&lt;h2 id="promptquesthttpspromptqueststreamlitapp">&lt;a href="https://promptquest.streamlit.app/">PromptQuest&lt;/a>&lt;/h2>
&lt;p>Explore a world of midjourney prompts.&lt;/p>
&lt;h2 id="aidochttpsgithubcomsaikatkumardeyaidoc">&lt;a href="https://github.com/saikatkumardey/aidoc">aidoc&lt;/a>&lt;/h2>
&lt;p>&lt;code>aidoc&lt;/code> is a command line interface (CLI) tool that uses AI to automatically generate documentation for your code.&lt;/p>
&lt;h2 id="quizgenaihttpsquizgenaicom">&lt;a href="https://quizgenai.com">QuizgenAI&lt;/a>&lt;/h2>
&lt;p>Generate quiz (question &amp;amp; answers) from text automatically.&lt;/p>
&lt;p>Demo:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CR0tPmZPHQs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;p>If you want to know when it launches, kindly fill out this &lt;a href="https://forms.gle/nRhXMif8wSN2DFZGA">form&lt;/a>.&lt;/p>
&lt;h2 id="quickreadaihttpsquickreadaistreamlitapp">&lt;a href="https://quickreadai.streamlit.app">QuickreadAI&lt;/a>&lt;/h2>
&lt;p>Skim through the core ideas of non-fiction books in 2 minutes.&lt;/p>
&lt;p>Demo:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lgazdC3AZO8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;h2 id="pixifidehttpspixifidecom---retired">&lt;a href="https://pixifide.com">Pixifide&lt;/a> - Retired&lt;/h2>
&lt;p>Make your images bigger and better using AI.&lt;/p></description></item><item><title>Creating a Personal Blog with Hugo: A Step-by-Step Guide</title><link>https://saikatkumardey.com/posts/personal-blog/</link><pubDate>Fri, 02 Dec 2022 11:15:58 +0530</pubDate><guid>https://saikatkumardey.com/posts/personal-blog/</guid><description>&lt;h1 id="introduction-to-personal-blogs">Introduction to personal blogs&lt;/h1>
&lt;p>Personal blogs are a great way for individuals to share their thoughts, experiences, and expertise with the world. Not only do personal blogs provide a platform for self-expression, but they can also be a valuable tool for networking and building a personal brand. In this post, we will discuss how to set up a personal blog using Hugo, GitHub Pages, and Cloudflare.&lt;/p>
&lt;h2 id="what-is-hugo">What is Hugo?&lt;/h2>
&lt;p>Hugo is a static site generator that makes it easy to create and manage a website or blog. It is known for its speed and flexibility, making it a popular choice among bloggers and web developers.&lt;/p>
&lt;h2 id="setting-up-hugo-on-your-local-machine">Setting up Hugo on your local machine&lt;/h2>
&lt;p>Before we can start using Hugo, we need to install it on our local machine. To do this, follow these steps:&lt;/p>
&lt;ol>
&lt;li>Download the latest version of Hugo from the &lt;a href="https://gohugo.io/">official website&lt;/a>.&lt;/li>
&lt;li>Install Hugo according to the instructions for your operating system.&lt;/li>
&lt;li>Verify that Hugo is installed correctly by running the following command in your terminal: &lt;code>hugo version&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Once Hugo is installed, we are ready to create our blog!&lt;/p>
&lt;h2 id="creating-a-new-hugo-site-and-adding-content">Creating a new Hugo site and adding content&lt;/h2>
&lt;p>To create a new Hugo site, run the following command in your terminal: &lt;code>hugo new site {your-site-name}&lt;/code>. This will create a new directory with the specified name and initialize it with the necessary files and folders for a Hugo site.&lt;/p>
&lt;p>Next, navigate to the new directory and add some content to your site. Hugo uses markdown syntax for formatting content, so you can create new pages and posts using markdown files. For example, to create a new blog post, run the following command: &lt;code>hugo new post/{your-post-name}.md&lt;/code>. This will create a new markdown file in the &lt;code>/content/post&lt;/code> directory of your Hugo site, where you can add the content for your post.&lt;/p>
&lt;p>Once you have added some content to your site, you can preview it locally by running the &lt;code>hugo server&lt;/code> command. This will start a local development server that you can access at &lt;code>http://localhost:1313&lt;/code> to see your site in action.&lt;/p>
&lt;h2 id="hosting-your-hugo-site-on-github-pages">Hosting your Hugo site on GitHub Pages&lt;/h2>
&lt;p>GitHub Pages is a free hosting service provided by GitHub that allows you to host static websites directly from a GitHub repository. This makes it a perfect fit for hosting Hugo sites, as Hugo generates static HTML files for your content.&lt;/p>
&lt;p>To host your Hugo site on GitHub Pages, follow these steps:&lt;/p>
&lt;ol>
&lt;li>Create a new repository on GitHub and give it the same name as your Hugo site.&lt;/li>
&lt;li>Push your Hugo site to the new repository. You can do this by running the following commands in your terminal:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &amp;#34;Initial commit&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin {your-github-repo-url}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>In the settings of your GitHub repository, go to the &amp;ldquo;GitHub Pages&amp;rdquo; section and select the &amp;ldquo;master branch&amp;rdquo; as the source for your site.&lt;/li>
&lt;/ol>
&lt;p>Once you have configured GitHub Pages, your Hugo site will be live at the URL provided in the &amp;ldquo;GitHub Pages&amp;rdquo; section. You can continue to make changes to your site and push them to the repository to update the live version.&lt;/p>
&lt;h2 id="configuring-a-custom-domain-with-cloudflare">Configuring a custom domain with Cloudflare&lt;/h2>
&lt;p>By default, your Hugo site will be accessible at a URL in the form of &lt;code>https://{your-github-username}.github.io/{your-site-name}&lt;/code>. If you want to use your own custom domain, you can do so by using Cloudflare.&lt;/p>
&lt;p>Cloudflare is a web performance and security company that offers a range of services, including DNS management and SSL/TLS encryption. By using Cloudflare, you can easily point your custom domain to your Hugo site hosted on GitHub Pages.&lt;/p>
&lt;p>To configure a custom domain with Cloudflare, follow these steps:&lt;/p>
&lt;ol>
&lt;li>Sign up for a free Cloudflare account and add your domain to your account.&lt;/li>
&lt;li>In the DNS settings of your domain, add a new &amp;ldquo;CNAME&amp;rdquo; record that points to the URL of your Hugo site on GitHub Pages. For example, if your site is hosted at &lt;code>https://{your-github-username}.github.io/{your-site-name}&lt;/code>, your CNAME record should have the value &lt;code>{your-github-username}.github.io&lt;/code>.&lt;/li>
&lt;li>Update the nameservers for your domain to the ones provided by Cloudflare. This will allow Cloudflare to manage the DNS for your domain.&lt;/li>
&lt;li>Once your DNS settings have propagated, your custom domain should&lt;/li>
&lt;/ol>
&lt;h2 id="adding-ssltls-security-with-cloudflare">Adding SSL/TLS security with Cloudflare&lt;/h2>
&lt;p>By default, your Hugo site hosted on GitHub Pages will be accessible over a secure HTTPS connection. However, you can improve the security of your site even further by using an SSL/TLS certificate from Cloudflare.&lt;/p>
&lt;p>To add SSL/TLS security to your Hugo site, follow these steps:&lt;/p>
&lt;ol>
&lt;li>In the &amp;ldquo;Crypto&amp;rdquo; settings of your domain on Cloudflare, select the &amp;ldquo;Full&amp;rdquo; SSL option. This will enable SSL/TLS encryption for your site and automatically issue an SSL/TLS certificate from Cloudflare.&lt;/li>
&lt;li>In the &amp;ldquo;Page Rules&amp;rdquo; settings of your domain, create a new rule to redirect all HTTP traffic to HTTPS. This will ensure that all visitors to your site are automatically redirected to the secure HTTPS version.&lt;/li>
&lt;/ol>
&lt;p>Once you have configured SSL/TLS with Cloudflare, your Hugo site will be accessible over a secure HTTPS connection using your custom domain.&lt;/p>
&lt;h2 id="conclusion-and-next-steps-for-customizing-your-hugo-blog">Conclusion and next steps for customizing your Hugo blog&lt;/h2>
&lt;p>In this post, we have covered the steps for setting up a personal blog using Hugo, GitHub Pages, and Cloudflare. You now have a fast and secure blog that you can customize to your heart&amp;rsquo;s content.&lt;/p>
&lt;p>Some possible next steps for customizing your Hugo blog include:&lt;/p>
&lt;ul>
&lt;li>Choose a theme from the &lt;a href="https://themes.gohugo.io/">Hugo themes&lt;/a> library to give your site a unique look and feel.&lt;/li>
&lt;li>Add functionality to your site using Hugo&amp;rsquo;s &lt;a href="https://gohugo.io/content-management/shortcodes/">shortcodes&lt;/a>.&lt;/li>
&lt;li>Integrate your blog with social media and other online platforms using the &lt;a href="https://gohugo.io/hugo-pipes/">Hugo Pipes&lt;/a> feature.&lt;/li>
&lt;/ul>
&lt;p>With these tools and resources, you can take your Hugo blog to the next level and create a truly unique and engaging online presence.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, setting up a personal blog with Hugo can be a great way to share your thoughts, ideas, and writing with the world. With its intuitive interface and powerful features, Hugo makes it easy to create and customize a professional-looking blog. By following the steps outlined in this post, you can quickly set up Hugo on your local machine, create a new site, add content, and host it on GitHub Pages. Additionally, you can use Cloudflare to configure a custom domain and add SSL/TLS security to your site. Overall, using Hugo to create your own personal blog can be a fun and rewarding experience that can help you share your voice with the world.&lt;/p></description></item><item><title>Beyond F1: using the Fbeta_score for better model evaluation</title><link>https://saikatkumardey.com/posts/fbeta/</link><pubDate>Thu, 01 Dec 2022 21:08:28 +0530</pubDate><guid>https://saikatkumardey.com/posts/fbeta/</guid><description>&lt;p>Hey everyone!&lt;/p>
&lt;p>Today I want to talk about a little-known evaluation metric: Fbeta_score.&lt;/p>
&lt;p>If you&amp;rsquo;re familiar with machine learning, you&amp;rsquo;ve probably heard of F1 score. It&amp;rsquo;s a common metric used to evaluate the performance of classification models, and it&amp;rsquo;s defined as the harmonic mean of precision and recall. This is great for a lot of tasks, but there are some situations where F1 score might not be the best choice.&lt;/p>
&lt;p>Enter Fbeta_score. It&amp;rsquo;s similar to F1 score, but it allows you to adjust the balance between precision and recall by changing the value of beta. This can be useful in situations where you want to emphasize one of these metrics over the other.&lt;/p>
&lt;p>For example, let&amp;rsquo;s say you&amp;rsquo;re training a model to predict whether an image contains a cat or a dog. If you&amp;rsquo;re using F1 score, you&amp;rsquo;re treating precision and recall equally, but what if you want to put more emphasis on recall? This is where Fbeta_score comes in handy. By setting beta to a value greater than 1, you can increase the weight of recall in the metric, and by setting it to a value less than 1, you can decrease the weight of recall.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Fbeta_score&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">beta&lt;/span>&lt;span style="color:#000">^&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>) &lt;span style="color:#000">*&lt;/span> (&lt;span style="color:#000">precision&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">recall&lt;/span>) &lt;span style="color:#000">/&lt;/span> (&lt;span style="color:#000">beta&lt;/span>&lt;span style="color:#000">^&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">precision&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">recall&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where precision is the fraction of true positives over the sum of true positives and false positives, and recall is the fraction of true positives over the sum of true positives and false negatives.&lt;/p>
&lt;p>&lt;strong>How to choose a beta?&lt;/strong>&lt;/p>
&lt;p>&lt;strong>beta = 1&lt;/strong>
When beta=1, the Fbeta_score is equivalent to the F1 score, which treats precision and recall equally. This is a good default value to use if you don&amp;rsquo;t have any specific preferences or requirements regarding the balance between precision and recall.&lt;/p>
&lt;p>&lt;strong>beta &amp;lt; 1&lt;/strong>
If you want to emphasize precision over recall, you can use a value of beta less than 1. For example, setting beta=0.5 will give precision twice as much weight as recall in the metric. This can be useful if you want to minimize the number of false positives, or if the cost of a false positive is higher than the cost of a false negative.&lt;/p>
&lt;p>&lt;strong>beta &amp;gt; 1&lt;/strong>
On the other hand, if you want to emphasize recall over precision, you can use a value of beta greater than 1. For example, setting beta=2 will give recall twice as much weight as precision in the metric. This can be useful if you want to maximize the number of true positives, or if the cost of a false negative is higher than the cost of a false positive.&lt;/p>
&lt;p>In general, the best value of beta to use will depend on the specific goals and requirements of the task at hand. By experimenting with different values of beta, you can find the setting that produces the best results for your specific dataset and task.&lt;/p>
&lt;p>Here&amp;rsquo;s how to use Fbeta_score in Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">sklearn.metrics&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">fbeta_score&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Generate some predictions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">y_pred&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">0&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">0&lt;/span>, &lt;span style="color:#1c01ce">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Compute the Fbeta_score&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fbeta_score&lt;/span>(&lt;span style="color:#000">y_true&lt;/span>, &lt;span style="color:#000">y_pred&lt;/span>, &lt;span style="color:#000">beta&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1.0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the code above, y_pred is a list of binary predictions, and y_true is a list of ground-truth labels. We can then use the fbeta_score function from scikit-learn to compute the Fbeta_score. By default, this will compute the F1 score (i.e. beta=1.0), but you can adjust the value of beta to change the balance between precision and recall.&lt;/p></description></item><item><title>Solving Class Imbalance with Focal Loss</title><link>https://saikatkumardey.com/posts/focal-loss/</link><pubDate>Thu, 01 Dec 2022 20:49:34 +0530</pubDate><guid>https://saikatkumardey.com/posts/focal-loss/</guid><description>&lt;p>Class imbalance occurs when the number of observations in one or more classes is significantly different from the number of observations in other classes. This can lead to poor model performance, particularly when the minority class is important to predict accurately.&lt;/p>
&lt;p>Focal loss is a loss function that down-weights the contribution of well-classified examples and focuses on hard-to-classify examples. This can help to improve the performance of a machine learning model when dealing with class imbalance.&lt;/p>
&lt;p>In this post, we will understand the concept of focal loss and how it can be implemented in a machine learning model. We will also compare its effectiveness to other methods for solving class imbalance.&lt;/p>
&lt;h2 id="focal-loss">Focal loss&lt;/h2>
&lt;p>Focal loss is a variant of the cross-entropy loss function that is specifically designed to address class imbalance. It is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>FL(p) = -alpha * (1-p)^gamma * log(p)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where&lt;/p>
&lt;ul>
&lt;li>p is the predicted probability of the correct class&lt;/li>
&lt;li>alpha is a weighting factor for each sample,&lt;/li>
&lt;li>gamma is a tunable focusing parameter.&lt;/li>
&lt;/ul>
&lt;p>The focal loss function has the effect of down-weighting well-classified examples, and up-weighting examples that are misclassified. This can be useful in class imbalance scenarios, where the model may be inclined to simply predict the majority class for all examples in order to achieve a high overall accuracy. By using focal loss, the model is encouraged to focus on the hard examples, and to learn to predict the minority class more accurately.&lt;/p>
&lt;h2 id="focal-loss-parameters---alpha-and-gamma">Focal loss parameters - alpha and gamma&lt;/h2>
&lt;p>In the focal loss formula, alpha and gamma are two tunable parameters that control the behavior of the loss function.&lt;/p>
&lt;p>&lt;code>alpha&lt;/code> is a weighting factor that is applied to each sample in the batch. It has the effect of down-weighting well-classified examples and up-weighting examples that are misclassified. The value of alpha is typically set such that the majority class has a lower weighting than the minority class, to help the model focus on the hard examples.&lt;/p>
&lt;p>&lt;code>gamma&lt;/code> is a focusing parameter that controls the degree to which the loss is down-weighted for well-classified examples. The value of gamma is typically set to a value greater than 1, which has the effect of down-weighting the loss for well-classified examples more heavily. This can help the model to focus on the hard examples and to learn to predict the minority class more accurately.&lt;/p>
&lt;h2 id="code-sample">Code sample&lt;/h2>
&lt;p>Here is an example of focal loss implemented in PyTorch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">torch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">focal_loss&lt;/span>(&lt;span style="color:#000">logits&lt;/span>, &lt;span style="color:#000">targets&lt;/span>, &lt;span style="color:#000">alpha&lt;/span>, &lt;span style="color:#000">gamma&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">probs&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">torch&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">sigmoid&lt;/span>(&lt;span style="color:#000">logits&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">weights&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">alpha&lt;/span> &lt;span style="color:#000">*&lt;/span> (&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">probs&lt;/span>) &lt;span style="color:#000">**&lt;/span> &lt;span style="color:#000">gamma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">focal_loss&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">weights&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">torch&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">log&lt;/span>(&lt;span style="color:#000">probs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">focal_loss&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">mean&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function takes the model&amp;rsquo;s predicted logits, the true targets, and the values of &lt;code>alpha&lt;/code> and &lt;code>gamma&lt;/code> as input and returns the average focal loss. It can then be used in the training loop of a machine learning model as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Train the model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">inputs&lt;/span>, &lt;span style="color:#000">targets&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">train_loader&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Calculate predicted logits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">logits&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">model&lt;/span>(&lt;span style="color:#000">inputs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Calculate focal loss&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">loss&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">focal_loss&lt;/span>(&lt;span style="color:#000">logits&lt;/span>, &lt;span style="color:#000">targets&lt;/span>, &lt;span style="color:#000">alpha&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0.25&lt;/span>, &lt;span style="color:#000">gamma&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Backpropagate and update the model weights&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">loss&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">backward&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optimizer&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">step&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we use the focal loss function to calculate the loss for each batch of training data and update the model weights using backpropagation. The values of &lt;code>alpha&lt;/code> and &lt;code>gamma&lt;/code> can be adjusted as needed to achieve the best performance.&lt;/p>
&lt;h2 id="thoughts-on-parameter-tuning">Thoughts on parameter tuning&lt;/h2>
&lt;p>In the example above, the focal loss function is defined as a partial function, with alpha and gamma as fixed parameters. The model is trained using the Adam optimizer, and the focal loss is used as the criterion. By adjusting the values of &lt;code>alpha&lt;/code> and &lt;code>gamma&lt;/code>, you can tune the focal loss function to suit your specific dataset and task.&lt;/p>
&lt;p>The values of alpha and gamma can be tuned to suit the specific dataset and task. In our example, we used &lt;code>alpha=0.75&lt;/code> and &lt;code>gamma=2.0&lt;/code>, but these values may not be optimal for all datasets. By experimenting with different values of these parameters, you can find the settings that produce the best results for your model.&lt;/p>
&lt;p>For example, if you increase the value of alpha, the weighting of the majority class will be decreased, and the weighting of the minority class will be increased. This can help the model to focus more on the minority class, and to learn to predict it more accurately. Similarly, if you increase the value of gamma, the down-weighting of well-classified examples will be increased, which can also help the model to focus more on the hard examples.&lt;/p>
&lt;h1 id="comparison-with-other-methods">Comparison with Other Methods&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Advantages&lt;/th>
&lt;th>Disadvantages&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Undersampling&lt;/td>
&lt;td>Removing examples from the majority class to balance the distribution of the training data&lt;/td>
&lt;td>Can be effective in reducing class imbalance&lt;/td>
&lt;td>Can lead to loss of important information from the majority class&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Oversampling&lt;/td>
&lt;td>Adding synthetic examples to the minority class to balance the distribution of the training data&lt;/td>
&lt;td>Can be effective in reducing class imbalance&lt;/td>
&lt;td>Can lead to overfitting if synthetic examples are not representative of the true data distribution&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Focal Loss&lt;/td>
&lt;td>Loss function that down-weights the contribution of well-classified examples and focuses on hard-to-classify examples&lt;/td>
&lt;td>Does not require changing the distribution of the training data&lt;/td>
&lt;td>Requires tuning of hyperparameters to achieve optimal performance&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>As shown in the table, focal loss has several advantages over undersampling and oversampling for dealing with class imbalance. It does not require changing the distribution of the training data, and it can be easily implemented in any machine learning model. However, it does require tuning of the hyperparameters &lt;code>alpha&lt;/code> and &lt;code>gamma&lt;/code> to achieve optimal performance.&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>In this example, we will demonstrate the effectiveness of focal loss for solving class imbalance in a machine learning model. We will use a real-world example of a binary classification problem to illustrate how focal loss can improve the performance of a model on an imbalanced dataset.&lt;/p>
&lt;p>Class imbalance is a common problem in medical imaging applications where the number of positive examples (e.g. diseased images) is often much smaller than the number of negative examples (e.g. healthy images). In this case study, we will consider a dataset of medical images and a binary classification task of predicting whether an image is healthy or diseased. The dataset is imbalanced, with a large number of healthy images and a small number of diseased images.&lt;/p>
&lt;p>To start, we will train a convolutional neural network (CNN) using the cross-entropy loss as the training loss. This loss function is commonly used in classification tasks, as it measures the difference between the predicted probabilities and the true labels. However, it has the disadvantage of treating all classes equally, which can result in poor performance on imbalanced datasets.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Image&lt;/th>
&lt;th>True Label&lt;/th>
&lt;th>Healthy&lt;/th>
&lt;th>Diseased&lt;/th>
&lt;th>Cross-Entropy Loss&lt;/th>
&lt;th>Focal Loss&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Healthy&lt;/td>
&lt;td>0.8&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>0.2231435&lt;/td>
&lt;td>0.0436035&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Healthy&lt;/td>
&lt;td>0.9&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>0.1053605&lt;/td>
&lt;td>0.0160707&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Healthy&lt;/td>
&lt;td>0.7&lt;/td>
&lt;td>0.3&lt;/td>
&lt;td>0.3566749&lt;/td>
&lt;td>0.0479158&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>Healthy&lt;/td>
&lt;td>0.6&lt;/td>
&lt;td>0.4&lt;/td>
&lt;td>0.5150763&lt;/td>
&lt;td>0.0687455&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>Diseased&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>0.9&lt;/td>
&lt;td>0.1053605&lt;/td>
&lt;td>0.8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>As we can see, the focal loss for the diseased image is significantly higher than the loss for the healthy images. This is because the focal loss down-weights the contribution of well-classified examples and focuses on hard-to-classify examples. In this case, the healthy images are well-classified and have a low focal loss, while the diseased image is hard-to-classify and has a high focal loss. This helps the model to better learn the patterns in the minority class of diseased images.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this blog post, we explored the problem of class imbalance in machine learning and introduced focal loss as a potential solution. We discussed the motivations behind focal loss and provided an example of how to implement it in a machine learning model. We also compared focal loss to other methods for solving class imbalance, such as undersampling and oversampling. Finally, we provided a case study of using focal loss to improve the performance of a machine learning model with class imbalance.&lt;/p>
&lt;p>Overall, focal loss is an effective technique for addressing class imbalance in machine learning. It can improve the performance of models by weighting the loss function to focus on hard-to-classify examples, while still allowing easy examples to contribute to the learning process.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning more about focal loss and other methods for solving class imbalance, there are many resources available online. Some suggested readings include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/1708.02002">Focal Loss for Dense Object Detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hasty.ai/docs/mp-wiki/loss/focal-loss">Focal Loss&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.analyticsvidhya.com/blog/2020/08/a-beginners-guide-to-focal-loss-in-object-detection/">A Beginner&amp;rsquo;s Guide To Focal Loss In Object Detection&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Mastering Common Patterns to Solve Leetcode Problems</title><link>https://saikatkumardey.com/posts/leetcode-patterns/</link><pubDate>Thu, 01 Dec 2022 10:25:29 +0530</pubDate><guid>https://saikatkumardey.com/posts/leetcode-patterns/</guid><description>&lt;p>In this post, I will introduce you to 14 important patterns that can help you solve most of the problems on Leetcode. I will provide a template for each pattern to help you quickly apply it to a problem, as well as a list of important problems to practice with. By the end of this post, you will have a powerful set of tools to enhance your problem-solving skills on Leetcode and beyond. Let&amp;rsquo;s get started!&lt;/p>
&lt;h2 id="1-sliding-window">1. Sliding Window&lt;/h2>
&lt;p>The sliding window pattern is a common technique used to solve problems involving arrays or strings. It involves using a fixed-size &amp;ldquo;window&amp;rdquo; that slides through the array or string, and performs some operation on each sub-array or sub-string that it covers. This allows you to perform the operation on each possible sub-array or sub-string without having to create a new array or string for each one.&lt;/p>
&lt;p>Here is a simple template in Python that you can use to solve any problem that uses the sliding window pattern:&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the window&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">window_start&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">window_end&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until the window_end reaches the end of the array/string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">window_end&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current sub-array/sub-string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">window_start&lt;/span>:&lt;span style="color:#000">window_end&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>], &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># move the window to the right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">window_start&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">window_end&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to define the update_result() function, which should take in the current sub-array/sub-string and the current result, and return an updated result.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the sliding window pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters&lt;/a>: This problem involves finding the longest substring in a string that does not contain any repeating characters. The sliding window pattern can be used to efficiently search for this substring.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-size-subarray-sum/">Minimum Size Subarray Sum&lt;/a>: This problem involves finding the smallest subarray in an array that has a given sum. The sliding window pattern can be used to efficiently search for this subarray.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/permutation-in-string/">Permutation in String&lt;/a>: This problem involves checking whether one string is a permutation of another string. The sliding window pattern can be used to efficiently compare the two strings and check for a permutation.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/">Longest Substring with At Most Two Distinct Characters&lt;/a> 💰: This problem involves finding the longest substring in a string that contains at most two distinct characters. The sliding window pattern can be used to efficiently search for this substring.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-window-substring/">Minimum Window Substring&lt;/a>: This problem involves finding the smallest substring in a string that contains all of the characters in another string. The sliding window pattern can be used to efficiently search for this substring.&lt;/li>
&lt;/ul>
&lt;h2 id="2-two-pointers">2. Two pointers&lt;/h2>
&lt;p>The two pointers pattern is a common technique used to solve problems involving arrays or strings. It involves using two &amp;ldquo;pointers&amp;rdquo; that point to different elements in the array or string, and moving them in a specific way to perform some operation on the sub-array or sub-string they cover. This allows you to perform the operation on each possible sub-array or sub-string without having to create a new array or string for each one.&lt;/p>
&lt;p>Here is a simple template in Python that you can use to solve any problem that uses the two pointers pattern:&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the pointers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pointer1&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pointer2&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until the pointers reach the end of the array/string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">pointer1&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>) &lt;span style="color:#000">and&lt;/span> &lt;span style="color:#000">pointer2&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current sub-array/sub-string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">pointer1&lt;/span>:&lt;span style="color:#000">pointer2&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>], &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># move the pointers according to the specific rules of the pattern&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pointer1&lt;/span>, &lt;span style="color:#000">pointer2&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">move_pointers&lt;/span>(&lt;span style="color:#000">pointer1&lt;/span>, &lt;span style="color:#000">pointer2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to define the move_pointers() and update_result() functions. The move_pointers() function should take in the current values of the pointers, and return updated values for the pointers according to the specific rules of the pattern. The update_result() function should take in the current sub-array/sub-string and the current result, and return an updated result.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the two pointers pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/two-sum/">Two Sum&lt;/a>: This problem involves finding two numbers in an array that add up to a given target number. The two pointers pattern can be used to efficiently search for these numbers by moving the pointers in opposite directions.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">Remove Duplicates from Sorted Array&lt;/a>: This problem involves removing duplicate elements from a sorted array. The two pointers pattern can be used to efficiently remove the duplicates by comparing the elements at each pointer and moving them as necessary.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/container-with-most-water/">Container With Most Water&lt;/a>: This problem involves finding the maximum area of a container formed by two lines on a graph. The two pointers pattern can be used to efficiently search for the maximum area by moving the pointers in opposite directions.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/trapping-rain-water/">Trapping Rain Water&lt;/a>: This problem involves finding the amount of rainwater that can be trapped between bars on a histogram. The two pointers pattern can be used to efficiently calculate the trapped water by moving the pointers inwards from the ends of the array.&lt;/li>
&lt;/ul>
&lt;h2 id="3-fast-and-slow-pointers">3. Fast and slow pointers&lt;/h2>
&lt;p>The fast and slow pointers pattern is a common technique used to solve problems involving linked lists. It involves using two pointers that traverse the linked list at different speeds. The &amp;ldquo;slow&amp;rdquo; pointer moves one step at a time, while the &amp;ldquo;fast&amp;rdquo; pointer moves two steps at a time. This allows the fast pointer to &amp;ldquo;lap&amp;rdquo; the slow pointer, and makes it possible to detect when the two pointers are pointing to the same node (i.e., they have &amp;ldquo;collided&amp;rdquo;).&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the pointers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">slow_pointer&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">linked_list&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fast_pointer&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">linked_list&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until the pointers reach the end of the linked list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">fast_pointer&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span> &lt;span style="color:#000">and&lt;/span> &lt;span style="color:#000">fast_pointer&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">slow_pointer&lt;/span>, &lt;span style="color:#000">fast_pointer&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># move the pointers according to the specific rules of the pattern&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">slow_pointer&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">slow_pointer&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fast_pointer&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">fast_pointer&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># check if the pointers have collided&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">slow_pointer&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">fast_pointer&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to define the update_result() function, which should take in the current values of the slow and fast pointers, and the current result, and return an updated result.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the fast and slow pointers pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle&lt;/a>: This problem involves detecting whether a linked list contains a cycle. The fast and slow pointers pattern can be used to efficiently detect the cycle by moving the pointers at different speeds and checking for overlap.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/middle-of-the-linked-list/">Middle of the Linked List&lt;/a>: This problem involves finding the middle element of a linked list. The fast and slow pointers pattern can be used to efficiently find the middle element by moving the pointers at different speeds and stopping when the fast pointer reaches the end of the list.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/happy-number/">Happy Number&lt;/a>: This problem involves determining whether a number is a happy number. The fast and slow pointers pattern can be used to efficiently check for happiness by moving the pointers at different speeds and checking for a cycle.
Reorder List: This problem involves reordering the elements of a linked list in a specific way. The fast and slow pointers pattern can be used to efficiently reorder the elements by moving the pointers at different speeds and rearranging the elements as necessary.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/palindrome-linked-list/">Palindrome Linked List&lt;/a>: This problem involves checking whether a linked list is a palindrome. The fast and slow pointers pattern can be used to efficiently check for palindromicity by moving the pointers at different speeds and comparing the elements at each pointer.&lt;/li>
&lt;/ul>
&lt;h2 id="4-merge-intervals">4. Merge Intervals&lt;/h2>
&lt;p>The merge intervals pattern is a common technique used to solve problems involving sets of intervals. It involves sorting the intervals by their start time, and then merging any intervals that overlap. This allows you to take a set of potentially overlapping intervals and convert it into a set of non-overlapping intervals.&lt;/p>
&lt;p>Here is a simple template in Python that you can use to solve any problem that uses the merge intervals pattern:&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># sort the intervals by their start time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">intervals&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">sorted&lt;/span>(&lt;span style="color:#000">intervals&lt;/span>, &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>: &lt;span style="color:#000">x&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the result list with the first interval&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#000">intervals&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop through the remaining intervals&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">intervals&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># get the last interval in the result list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">last_interval&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">result&lt;/span>[&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># check if the current interval overlaps with the last interval&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">intervals&lt;/span>[&lt;span style="color:#000">i&lt;/span>][&lt;span style="color:#1c01ce">0&lt;/span>] &lt;span style="color:#000">&amp;lt;=&lt;/span> &lt;span style="color:#000">last_interval&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># if it does, merge the current interval with the last interval&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span>[&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>] &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">last_interval&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>], &lt;span style="color:#a90d91">max&lt;/span>(&lt;span style="color:#000">last_interval&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>], &lt;span style="color:#000">intervals&lt;/span>[&lt;span style="color:#000">i&lt;/span>][&lt;span style="color:#1c01ce">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># if it doesn&amp;#39;t, add the current interval to the result list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">intervals&lt;/span>[&lt;span style="color:#000">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide a list of intervals (in the form of tuples of start and end times), and the template will return a list of non-overlapping intervals.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the merge intervals pattern:&lt;/p>
&lt;p>-&lt;a href="https://leetcode.com/problems/merge-intervals">Merge Intervals&lt;/a>: This problem involves merging a list of intervals that may overlap.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/insert-interval">Insert Interval&lt;/a>: This problem involves inserting a new interval into a list of intervals that may overlap.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/meeting-rooms">Meeting Rooms&lt;/a>: This problem involves checking whether it is possible to attend all of the meetings in a list of intervals.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/meeting-rooms-ii">Meeting Rooms II&lt;/a>: This problem involves finding the minimum number of rooms needed to hold all of the meetings in a list of intervals.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons">Minimum Number of Arrows to Burst Balloons&lt;/a>: This problem involves finding the minimum number of arrows needed to burst a given set of balloons.&lt;/li>
&lt;/ul>
&lt;h2 id="5-cyclic-sort">5. Cyclic sort&lt;/h2>
&lt;p>Cyclic sort is a technique used to sort a list of numbers that are in a certain range, but not necessarily in the correct order. It involves looping through the list and &amp;ldquo;cycling&amp;rdquo; the numbers into the correct positions. For example, if the list is [3, 1, 5, 4, 2] and the range is 1 to 5, the first step would be to put the 1 in its correct position at index 0, the second step would be to put the 2 in its correct position at index 1, and so on.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the current index and the number of items to sort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">current_index&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">num_to_sort&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until all items have been sorted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">num_to_sort&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># get the correct value for the current index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">correct_value&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">current_index&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># check if the current value is already correct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">current_index&lt;/span>] &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">correct_value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># if it is, move on to the next index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current_index&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">num_to_sort&lt;/span> &lt;span style="color:#000">-=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># if it isn&amp;#39;t, swap the current value with the correct value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">current_index&lt;/span>], &lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">current_index&lt;/span>] &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>] &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">current_index&lt;/span>] &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>], &lt;span style="color:#000">arr&lt;/span>[&lt;span style="color:#000">current_index&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the sorted array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">arr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide a list of numbers that are in a certain range, and the template will return the sorted list.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the cyclic sort pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/find-the-duplicate-number">Find the Duplicate Number&lt;/a>: This problem involves finding the duplicate element in an array of numbers that are in the range 1 to n.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/find-the-missing-number">Find the Missing Number&lt;/a>: This problem involves finding the missing element in an array of numbers that are in the range 1 to n.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/first-missing-positive/">First Missing Positive&lt;/a>: This problem involves finding the smallest missing positive number in an array of numbers.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/find-all-duplicates-in-an-array">Find All Duplicates in an Array&lt;/a>: This problem involves finding all of the duplicate elements in an array of numbers.&lt;/li>
&lt;/ul>
&lt;h2 id="6-in-place-reversal-of-linked-list">6. In-place reversal of linked-list&lt;/h2>
&lt;p>&amp;ldquo;In-place reversal of a linked list&amp;rdquo; refers to a technique for reversing the order of the nodes in a linked list without using any additional data structures. This is done by changing the links between the nodes in the linked list so that the nodes are connected in the opposite order.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the previous, current, and next nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">prev_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">curr_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">linked_list&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">next_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until the current node is None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">curr_node&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># store the next node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">next_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">curr_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># reverse the link between the current and previous nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">curr_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">prev_node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># move the previous and current nodes forward&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">prev_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">curr_node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">curr_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">next_node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># set the head of the linked list to the new start node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">linked_list&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">head&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">prev_node&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide a linked list object and the template will reverse the order of the nodes in the linked list.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the in-place reversal of linked list pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/reverse-linked-list">Reverse Linked List&lt;/a>: This problem involves reversing the order of elements in a linked list.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/reverse-linked-list-ii">Reverse Linked List II&lt;/a>: This problem involves reversing a portion of a linked list.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/palindrome-linked-list">Palindrome Linked List&lt;/a>: This problem involves checking whether a linked list is a palindrome.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/reorder-list">Reorder List&lt;/a>: This problem involves reordering the elements of a linked list in a specific way.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/swap-nodes-in-pairs">Swap Nodes in Pairs&lt;/a>: This problem involves swapping the nodes in a linked list in pairs.&lt;/li>
&lt;/ul>
&lt;h2 id="7-tree-bfs">7. Tree BFS&lt;/h2>
&lt;p>The tree BFS (Breadth-First Search) pattern is a technique used to traverse the nodes of a tree in a level-by-level order. In the case of a binary tree (i.e., a tree in which each node has at most two children), the tree BFS algorithm can be implemented as follows:&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the queue with the root node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">queue&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#000">root&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until the queue is empty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">queue&lt;/span>) &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># get the next node from the queue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current_node&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>(&lt;span style="color:#1c01ce">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">current_node&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># add the left and right child nodes of the current node to the queue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">current_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">current_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">left&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">current_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">right&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">current_node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide the root node of the binary tree and define the update_result() function, which should take in the current node and the current result, and return an updated result.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the tree BFS pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal">Binary Tree Level Order Traversal&lt;/a>: This problem involves performing a level-order traversal of a binary tree.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-depth-of-binary-tree">Minimum Depth of Binary Tree&lt;/a>: This problem involves finding the minimum depth of a binary tree.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/symmetric-tree">Symmetric Tree&lt;/a>: This problem involves checking whether a binary tree is symmetric.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal">Binary Tree Zigzag Level Order Traversal&lt;/a>: This problem involves performing a zigzag-level-order traversal of a binary tree.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree">Serialize and Deserialize Binary Tree&lt;/a>: This problem involves serializing and deserializing a binary tree.&lt;/li>
&lt;/ul>
&lt;h2 id="8-tree-dfs">8. Tree DFS&lt;/h2>
&lt;p>The tree DFS (Depth-First Search) pattern is a technique used to traverse the nodes of a tree in a depth-first manner. In the case of a binary tree (i.e., a tree in which each node has at most two children), the tree DFS algorithm can be implemented as follows:&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># perform the DFS traversal on the root node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">traverse&lt;/span>(&lt;span style="color:#000">root&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">traverse&lt;/span>(&lt;span style="color:#000">node&lt;/span>, &lt;span style="color:#000">result&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">node&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># recursively traverse the left and right child nodes of the current node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">traverse&lt;/span>(&lt;span style="color:#000">node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">left&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">right&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#a90d91">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">traverse&lt;/span>(&lt;span style="color:#000">node&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">right&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide the root node of the binary tree and define the update_result() function, which should take in the current node and the current result, and return an updated result.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the tree DFS pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/binary-tree-preorder-traversal">Binary Tree Preorder Traversal&lt;/a>: This problem involves performing a preorder traversal of a binary tree.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/validate-binary-search-tree">Validate Binary Search Tree&lt;/a>: This problem involves checking whether a binary tree is a valid binary search tree.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/maximum-depth-of-binary-tree">Maximum Depth of Binary Tree&lt;/a>: This problem involves finding the maximum depth of a binary tree.&lt;/li>
&lt;/ul>
&lt;h2 id="9-two-heaps">9. Two heaps&lt;/h2>
&lt;p>The &amp;ldquo;two heaps&amp;rdquo; pattern is a common technique used to solve problems involving sets of numbers. It involves using two heaps (i.e., data structures that provide efficient ways to insert and remove items, and to find the minimum or maximum item) to store the numbers in the set. This allows you to efficiently maintain certain properties of the numbers in the set, and to quickly perform operations on the numbers when needed.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">heapq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the two heaps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heap1&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heap2&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop through the numbers in the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># insert the number into the appropriate heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">condition1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappush&lt;/span>(&lt;span style="color:#000">heap1&lt;/span>, &lt;span style="color:#000">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappush&lt;/span>(&lt;span style="color:#000">heap2&lt;/span>, &lt;span style="color:#000">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># balance the heaps if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">condition2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappush&lt;/span>(&lt;span style="color:#000">heap2&lt;/span>, &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappop&lt;/span>(&lt;span style="color:#000">heap1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">elif&lt;/span> &lt;span style="color:#000">condition3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappush&lt;/span>(&lt;span style="color:#000">heap1&lt;/span>, &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappop&lt;/span>(&lt;span style="color:#000">heap2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># update any other variables you need&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">update_variables&lt;/span>(&lt;span style="color:#000">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use this template, you just need to provide a list of numbers and define the condition1, condition2, condition3, and update_variables() functions. These functions should determine which heap to insert the current number into, whether the heaps need to be balanced, and how to update any other variables you need.&lt;/p>
&lt;p>For example, if you want to use the two heaps pattern to find the median of a set of numbers, you could define the following functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># insert the number into the smaller_half heap if it is smaller than the current median,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># or into the larger_half heap if it is larger or equal to the current median&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">condition1&lt;/span>(&lt;span style="color:#000">num&lt;/span>, &lt;span style="color:#000">median&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">median&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># balance the heaps if the size difference between them is greater than 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">condition2&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>, &lt;span style="color:#000">larger_half&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>) &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">larger_half&lt;/span>) &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># balance the heaps if the size difference between them is greater than 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">condition3&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>, &lt;span style="color:#000">larger_half&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">larger_half&lt;/span>) &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>) &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># update the median if the size of the two heaps is equal, or if one heap is larger than the other&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">update_variables&lt;/span>(&lt;span style="color:#000">num&lt;/span>, &lt;span style="color:#000">median&lt;/span>, &lt;span style="color:#000">smaller_half&lt;/span>, &lt;span style="color:#000">larger_half&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>) &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">larger_half&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">median&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">smaller_half&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>] &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">larger_half&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>]) &lt;span style="color:#000">/&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">elif&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">smaller_half&lt;/span>) &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">larger_half&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">median&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">smaller_half&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">median&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">larger_half&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the two heaps pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/kth-largest-element-in-an-array">Kth Largest Element in an Array&lt;/a>: This problem involves finding the kth largest element in an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/median-of-two-sorted-arrays">Median of Two Sorted Arrays&lt;/a>: This problem involves finding the median of two sorted arrays.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/sliding-window-median">Sliding Window Median&lt;/a>: This problem involves finding the median of the elements in a sliding window of an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/top-k-frequent-elements">Top K Frequent Elements&lt;/a>: This problem involves finding the k most frequent elements in an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix">Kth Smallest Element in a Sorted Matrix&lt;/a>: This problem involves finding the kth smallest element in a sorted matrix.&lt;/li>
&lt;/ul>
&lt;h2 id="10-subsets">10. Subsets&lt;/h2>
&lt;p>The &amp;ldquo;subsets&amp;rdquo; pattern is a common technique used to solve problems involving sets of numbers. It involves generating all possible subsets of the set and then performing some operation on each subset to find the desired result. This allows you to consider all possible combinations of numbers in the set and to efficiently compute the result for each combination.&lt;/p>
&lt;p>&lt;strong>Template 1&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># generate all possible subsets of the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">subset&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">itertools&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">combinations&lt;/span>(&lt;span style="color:#000">nums&lt;/span>, &lt;span style="color:#000">r&lt;/span>) &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">r&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">nums&lt;/span>)&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current subset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">subset&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Template 2&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># generate all possible subsets of the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">**&lt;/span>&lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">nums&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># convert the binary representation of i to a list of indices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">indices&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#000">j&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">j&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">nums&lt;/span>)) &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span> (&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#000">j&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># generate the current subset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">subset&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#000">nums&lt;/span>[&lt;span style="color:#000">j&lt;/span>] &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">j&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">indices&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># perform the operation on the current subset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">update_result&lt;/span>(&lt;span style="color:#000">subset&lt;/span>, &lt;span style="color:#000">result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It uses a single loop and binary operations to generate the subsets. It converts the binary representation of each number in the range 1..2^len(nums) to a list of indices, and then uses those indices to select the elements of the set that are included in the current subset.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the subsets pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/subsets">Subsets&lt;/a>: This problem involves generating all of the subsets of a given set of elements.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/subsets-ii">Subsets II&lt;/a>: This problem involves generating all of the subsets of a given set of elements, allowing for duplicates.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/permutations">Permutations&lt;/a>: This problem involves generating all of the permutations of a given set of elements.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/permutations-ii">Permutations II&lt;/a>: This problem involves generating all of the permutations of a given set of elements, allowing for duplicates.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/combination-sum">Combination Sum&lt;/a>: This problem involves finding all of the combinations of a given set of elements that add up to a specific target sum.&lt;/li>
&lt;/ul>
&lt;h2 id="11-modified-binary-search">11. Modified Binary Search&lt;/h2>
&lt;p>The &amp;ldquo;modified binary search&amp;rdquo; pattern is a common technique used to solve problems involving a sorted array of numbers. It is similar to regular binary search, but it allows you to modify the condition used to determine whether to search the left or right half of the array. This can be useful if the problem you&amp;rsquo;re trying to solve involves finding the position of an element in the array that satisfies a certain condition, or if the array has duplicate elements and you need to find the first or last occurrence of a given element.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the left and right pointers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">right&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">nums&lt;/span>) &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># search the array until the left and right pointers meet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">right&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># calculate the middle index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mid&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">+&lt;/span> (&lt;span style="color:#000">right&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">left&lt;/span>) &lt;span style="color:#000">//&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># modify the condition used to determine which half of the array to search&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">condition&lt;/span>(&lt;span style="color:#000">nums&lt;/span>[&lt;span style="color:#000">mid&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">right&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">mid&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">left&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to use the modified binary search pattern to find the first occurrence of a given element in an array, you could define the following condition() function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">condition&lt;/span>(&lt;span style="color:#000">num&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">target&lt;/span> &lt;span style="color:#000">and&lt;/span> (&lt;span style="color:#000">mid&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span> &lt;span style="color:#000">or&lt;/span> &lt;span style="color:#000">nums&lt;/span>[&lt;span style="color:#000">mid&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>] &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">target&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function checks whether the current element is equal to the target element and whether it is the first occurrence of that element in the array (i.e., whether the element before it is not equal to the target). If both of these conditions are satisfied, then the function returns True, indicating that the left pointer should be updated to the current index. Otherwise, it returns False, indicating that the right pointer should be updated to the current index.&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the modified binary search pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/search-in-rotated-sorted-array">Search in Rotated Sorted Array&lt;/a>: This problem involves searching for an element in a rotated sorted array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array">Find Minimum in Rotated Sorted Array&lt;/a>: This problem involves finding the minimum element in a rotated sorted array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii">Search in Rotated Sorted Array II&lt;/a>: This problem involves searching for an element in a rotated sorted array that may contain duplicates.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/find-peak-element">Find Peak Element&lt;/a>: This problem involves finding a peak element in an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/find-k-closest-elements">Find K Closest Elements&lt;/a>: This problem involves finding the k closest elements to a given target in an array.&lt;/li>
&lt;/ul>
&lt;h2 id="12-top-k-elements">12. Top K elements&lt;/h2>
&lt;p>The &amp;ldquo;top k elements&amp;rdquo; pattern is a common technique used to solve problems involving a large set of numbers. It involves finding the largest or smallest k elements in the set and then performing some operation on those elements to find the desired result. This allows you to efficiently select the most important elements from the set and to compute the result using only those elements.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the heap with the first k elements of the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heap&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">nums&lt;/span>[:&lt;span style="color:#000">k&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># heapify the heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heapify&lt;/span>(&lt;span style="color:#000">heap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop through the remaining elements of the set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">nums&lt;/span>[&lt;span style="color:#000">k&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># insert the current element into the heap if it is larger than the smallest element in the heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">heap&lt;/span>[&lt;span style="color:#1c01ce">0&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappushpop&lt;/span>(&lt;span style="color:#000">heap&lt;/span>, &lt;span style="color:#000">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">operation&lt;/span>(&lt;span style="color:#000">heap&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, if you want to use the top k elements pattern to find the sum of the largest k elements in a set, you could define the following operation() function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">operation&lt;/span>(&lt;span style="color:#000">heap&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#a90d91">sum&lt;/span>(&lt;span style="color:#000">heap&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function simply returns the sum of all the elements in the heap, which are the largest k elements in the set&lt;/p>
&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the top k elements pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/kth-largest-element-in-an-array">Kth Largest Element in an Array&lt;/a>: This problem involves finding the kth largest element in an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/top-k-frequent-elements">Top K Frequent Elements&lt;/a>: This problem involves finding the k most frequent elements in an array.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix">Kth Smallest Element in a Sorted Matrix&lt;/a>: This problem involves finding the kth smallest element in a sorted matrix.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/sort-colors">Sort Colors&lt;/a>: This problem involves sorting an array of colors (represented as numbers) in place.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-cost-to-hire-k-workers">Minimum Cost to Hire K Workers&lt;/a>: This problem involves finding the minimum cost to hire k workers, given their wage and productivity.&lt;/li>
&lt;/ul>
&lt;h2 id="13-k-way-merge-using-heap">13. K-way Merge (using heap)&lt;/h2>
&lt;p>The k-way merge pattern using a heap is a common technique used to merge k sorted arrays into a single sorted array. It involves using a heap data structure to efficiently select the smallest element from the k arrays and to add it to the result. This allows you to efficiently combine the k arrays into a single sorted array and to perform further operations on that array.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># initialize the result and the heap with the first elements of the k arrays&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heap&lt;/span> &lt;span style="color:#000">=&lt;/span> [(&lt;span style="color:#000">arrays&lt;/span>[&lt;span style="color:#000">i&lt;/span>][&lt;span style="color:#1c01ce">0&lt;/span>], &lt;span style="color:#000">i&lt;/span>) &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#a90d91">range&lt;/span>(&lt;span style="color:#000">k&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># heapify the heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heapify&lt;/span>(&lt;span style="color:#000">heap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># loop until all the arrays have been merged&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">heap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># get the smallest element from the heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">min_element&lt;/span>, &lt;span style="color:#000">min_index&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappop&lt;/span>(&lt;span style="color:#000">heap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># add the smallest element to the result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">min_element&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># insert the next element from the array where the smallest element was found into the heap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">min_index&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arrays&lt;/span>[&lt;span style="color:#000">min_index&lt;/span>]) &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">heapq&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">heappush&lt;/span>(&lt;span style="color:#000">heap&lt;/span>, (&lt;span style="color:#000">arrays&lt;/span>[&lt;span style="color:#000">min_index&lt;/span>][&lt;span style="color:#000">min_index&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>], &lt;span style="color:#000">min_index&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># return the final result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the k-way merge (using heap) pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/merge-k-sorted-lists">Merge k Sorted Lists&lt;/a>: This problem involves merging k sorted linked lists into a single sorted linked list.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/the-skyline-problem">The Skyline Problem&lt;/a>: This problem involves finding the skyline of a set of buildings.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-cost-to-connect-sticks">Minimum Cost to Connect Sticks&lt;/a>: This problem involves connecting a set of sticks with minimum total cost.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended">Maximum Number of Events That Can Be Attended&lt;/a>: This problem involves finding the maximum number of events that a person can attend, given a list of events with start and end times.&lt;/li>
&lt;/ul>
&lt;h2 id="14-topological-sort">14. Topological Sort&lt;/h2>
&lt;p>Topological sort is an algorithm that is used to arrange the vertices of a directed acyclic graph (DAG) in a linear order such that, for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. This is useful for problems where a certain set of dependencies must be satisfied, such as scheduling tasks or determining the order in which to assemble a product.&lt;/p>
&lt;p>To perform a topological sort, we first identify all of the vertices with no incoming edges (i.e., no dependencies) and put them in a queue. We then remove these vertices from the graph and repeat the process until the queue is empty. At each step, we add the vertices we remove to a list, which will eventually give us the topological ordering of the vertices.&lt;/p>
&lt;p>Topological sort is commonly used to solve problems on LeetCode, such as &amp;ldquo;Course Schedule&amp;rdquo; and &amp;ldquo;Alien Dictionary&amp;rdquo;. It can also be useful for solving other problems that involve dependencies between objects or tasks.&lt;/p>
&lt;p>&lt;strong>Template&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">collections&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">deque&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">topological_sort&lt;/span>(&lt;span style="color:#000">vertices&lt;/span>, &lt;span style="color:#000">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Create a list to store the topological ordering of the vertices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">top_order&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Create a queue to keep track of the vertices with no incoming edges&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queue&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">deque&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Create a dictionary to store the indegrees of each vertex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">indegrees&lt;/span> &lt;span style="color:#000">=&lt;/span> {&lt;span style="color:#000">vertex&lt;/span>: &lt;span style="color:#1c01ce">0&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">vertex&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">vertices&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Create a dictionary to store the adjacency list for each vertex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">adj_list&lt;/span> &lt;span style="color:#000">=&lt;/span> {&lt;span style="color:#000">vertex&lt;/span>: [] &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">vertex&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">vertices&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Populate the indegrees dictionary and adjacency list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">edge&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">edges&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">u&lt;/span>, &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">edge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">indegrees&lt;/span>[&lt;span style="color:#000">v&lt;/span>] &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">adj_list&lt;/span>[&lt;span style="color:#000">u&lt;/span>]&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">v&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Add all vertices with no incoming edges to the queue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">vertex&lt;/span>, &lt;span style="color:#000">indegree&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">indegrees&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">items&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">indegree&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">vertex&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Perform the topological sort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">while&lt;/span> &lt;span style="color:#000">queue&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Remove a vertex from the queue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">vertex&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">popleft&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Add the vertex to the topological ordering&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">top_order&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">vertex&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># Decrement the indegree of each of its neighbors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">neighbor&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">adj_list&lt;/span>[&lt;span style="color:#000">vertex&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">indegrees&lt;/span>[&lt;span style="color:#000">neighbor&lt;/span>] &lt;span style="color:#000">-=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># If the indegree of a neighbor becomes 0, add it to the queue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">indegrees&lt;/span>[&lt;span style="color:#000">neighbor&lt;/span>] &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queue&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">neighbor&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500"># If there are any vertices left in the graph, then the original graph was not a DAG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">top_order&lt;/span>) &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">vertices&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">top_order&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Practise&lt;/strong>&lt;/p>
&lt;p>Here are some important problems on leetcode that can be solved using the topological sort pattern:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/problems/course-schedule">Course Schedule&lt;/a>: This problem involves checking whether a given set of courses can be completed, given the dependencies between the courses.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/course-schedule-ii">Course Schedule II&lt;/a>: This problem involves finding the order in which the courses should be taken in order to complete them all.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/alien-dictionary">Alien Dictionary&lt;/a>: This problem involves reconstructing the order of the letters in an alien language, given a list of words.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/sequence-reconstruction">Sequence Reconstruction&lt;/a>: This problem involves checking whether a given sequence can be reconstructed from a given set of subsequences.&lt;/li>
&lt;li>&lt;a href="https://leetcode.com/problems/minimum-height-trees">Minimum Height Trees&lt;/a>: This problem involves finding the root(s) of a tree with minimum height.&lt;/li>
&lt;/ul>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://designgurus.org/link/pvL2Ws?url=https%3A%2F%2Fdesigngurus.org%2Fcourse%3Fcourseid%3Dgrokking-the-coding-interview">Grokking the Coding Interview: Patterns for Coding Questions&lt;/a>&lt;/p>
&lt;p>This is structured course for understanding every pattern step by step using visual walk-through.&lt;/p>
&lt;p>&lt;em>&lt;strong>Disclaimer&lt;/strong>: It&amp;rsquo;s an affiliate link. If you would like to thank me for this post, please purchase via that link. If you do not want to use that link for some reason, &lt;a href="https://designgurus.org/course/grokking-the-coding-interview">here&lt;/a> is a clean link.&lt;/em> :)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed">14 patterns to ace any coding interview question&lt;/a>&lt;/p>
&lt;p>This blog post is a fork of this post. I would recommend checking it out.
It&amp;rsquo;s an overview of the &lt;a href="https://designgurus.org/link/pvL2Ws?url=https%3A%2F%2Fdesigngurus.org%2Fcourse%3Fcourseid%3Dgrokking-the-coding-interview">Grokking course&lt;/a> shared above.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://emre.me/categories/#coding-patterns">emre.me #coding patterns&lt;/a>&lt;/p>
&lt;p>Excellent post about how to identify the patterns. Highly recommended.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>How to love what you do?</title><link>https://saikatkumardey.com/posts/15/</link><pubDate>Sat, 02 Jul 2022 09:40:42 +0530</pubDate><guid>https://saikatkumardey.com/posts/15/</guid><description>&lt;p>Finding the work you love can often seem like a daunting task, but there&amp;rsquo;s no secret ingredient to it. Instead, the key is to simply start producing. Whether you&amp;rsquo;re a writer, an artist, a musician, or anything else, the most important thing is to just get started and begin creating.&lt;/p>
&lt;p>At first, it&amp;rsquo;s okay to focus on quantity rather than quality. Don&amp;rsquo;t worry about making everything perfect from the beginning – just keep producing and putting yourself out there. As you continue to create, you will naturally start to get better at it. And as you improve, you will begin to find more and more enjoyment in the work itself.&lt;/p>
&lt;p>It&amp;rsquo;s important to remember that finding the work you love isn&amp;rsquo;t something that happens overnight. It takes time and effort to develop your skills and find your passion. But by simply starting to produce and focusing on improving, you will gradually start to love the work you&amp;rsquo;re doing.&lt;/p>
&lt;p>So don&amp;rsquo;t worry about trying to find that elusive secret ingredient – just start creating and let the love for your work develop naturally over time. Keep producing, keep improving, and eventually you will find the work that truly brings you joy and fulfillment.&lt;/p></description></item><item><title>Training Image Classification Models with scikeras</title><link>https://saikatkumardey.com/posts/scikeras/</link><pubDate>Sat, 25 Jun 2022 13:06:10 +0530</pubDate><guid>https://saikatkumardey.com/posts/scikeras/</guid><description>&lt;h2 id="introduction-to-scikeras">Introduction to scikeras&lt;/h2>
&lt;p>Scikeras is a powerful tool that allows users to combine the capabilities of TensorFlow and scikit-learn in order to train deep learning models. By using scikeras, users can take advantage of the strengths of both TensorFlow and scikit-learn, and benefit from the ease of use and flexibility of scikit-learn&amp;rsquo;s API.&lt;/p>
&lt;p>In this blog post, we will demonstrate how to use scikeras to train a model using a large dataset of images stored on disk. We will show how to use TensorFlow&amp;rsquo;s &lt;code>ImageDataGenerator()&lt;/code> function to load images in batches and apply real-time augmentation, and how to use scikeras&amp;rsquo;s &lt;code>KerasClassifier()&lt;/code> to create a scikit-learn compatible interface for training the model. We will also demonstrate how to use &lt;code>partial_fit()&lt;/code> to train the model on smaller batches of data and retain the history of model weights and parameters.&lt;/p>
&lt;h2 id="download-dataset">Download dataset&lt;/h2>
&lt;p>Download a sample &lt;a href="https://www.kaggle.com/datasets/muratkokludataset/pistachio-image-dataset">dataset&lt;/a> and store the dataset in &lt;code>data/&lt;/code>. Your directory structure should look like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>data/Pistachio_Image_Dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Kirmizi_Pistachio/*.jpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Siirt_Pistachio/*.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import-necessary-libraries">Import necessary libraries&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">math&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">ceil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">tensorflow&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">matplotlib&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">pyplot&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">scikeras.wrappers&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">KerasClassifier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tensorflow.keras.preprocessing.image&lt;/span> &lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">ImageDataGenerator&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup-constants">Setup Constants&lt;/h2>
&lt;p>Next, we need to set some constants that will be used throughout the training process. In this example, we will be using a batch size of 32 and training the model for 10 epochs. You may need to adjust these values depending on your dataset and the performance of your model.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DATA_DIR&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#34;data/Pistachio_Image_Dataset&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">BATCH_SIZE&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">EPOCHS&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loader-for-reading-data-in-batches">Loader for reading data in batches&lt;/h2>
&lt;p>One of the key advantages of using scikeras is the ability to train a model using large datasets that do not fit into memory. To do this, we can use TensorFlow&amp;rsquo;s &lt;code>ImageDataGenerator()&lt;/code> function to load images in batches and apply real-time augmentation. This allows us to train the model on smaller chunks of the dataset, without having to load the entire dataset into memory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">image_generator&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">ImageDataGenerator&lt;/span>(&lt;span style="color:#000">rescale&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1.0&lt;/span> &lt;span style="color:#000">/&lt;/span> &lt;span style="color:#1c01ce">255&lt;/span>)&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">flow_from_directory&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DATA_DIR&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">target_size&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">32&lt;/span>, &lt;span style="color:#1c01ce">32&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch_size&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">BATCH_SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">class_mode&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;binary&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">total_images&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">image_generator&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">filenames&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">total_batches&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">ceil&lt;/span>(&lt;span style="color:#000">total_images&lt;/span> &lt;span style="color:#000">//&lt;/span> &lt;span style="color:#000">BATCH_SIZE&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code, we are using ImageDataGenerator() to create a generator that will load the images in DATA_DIR in batches of size BATCH_SIZE, apply a rescaling factor of 1/255, and return the images and labels in a binary format. We then calculate the total number of images in the dataset and the total number of batches. These values will be used later in the training loop.&lt;/p>
&lt;h2 id="define-your-tensorflow-model-architecture">Define your Tensorflow model architecture&lt;/h2>
&lt;p>Next, we need to define the architecture of our TensorFlow model. For the purposes of this example, we will be using a simple shallow-net with a single dense layer. However, you can use any architecture that you prefer, and you can experiment with different architectures to see which one performs best on your dataset.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">model&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">tf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">keras&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">Sequential&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">keras&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">layers&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">Input&lt;/span>(&lt;span style="color:#000">shape&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#1c01ce">32&lt;/span>, &lt;span style="color:#1c01ce">32&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">keras&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">layers&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">Flatten&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">keras&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">layers&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">Dense&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#000">activation&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;sigmoid&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="define-scikeras-interface">Define scikeras interface&lt;/h2>
&lt;p>Once we have defined our TensorFlow model, we can use scikeras&amp;rsquo;s KerasClassifier() function to create a scikit-learn compatible interface for training the model. This allows us to use the familiar fit() and predict() methods from scikit-learn, while taking advantage of the capabilities of TensorFlow.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sk_clf&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">KerasClassifier&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">model&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">model&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optimizer&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;adam&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">loss&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;binary_crossentropy&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">metrics&lt;/span>&lt;span style="color:#000">=&lt;/span>[&lt;span style="color:#c41a16">&amp;#34;accuracy&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code, we are creating a KerasClassifier object and passing it our TensorFlow model, as well as some other parameters such as the optimizer and loss function to use during training. We are also specifying that we want to track the accuracy metric during training. You can adjust these parameters as needed to suit your specific use.&lt;/p>
&lt;h2 id="training-loop">Training loop&lt;/h2>
&lt;p>Now that we have set up the necessary components for training our model, we can implement the main training loop. This loop will iterate over the batches of images generated by &lt;code>ImageDataGenerator()&lt;/code>, and will use &lt;code>partial_fit()&lt;/code> to train the model on each batch. &lt;code>partial_fit()&lt;/code> has the advantage of allowing us to train the model on smaller batches of data, and it also retains the history of model weights and parameters, whereas &lt;code>fit()&lt;/code> resets this history every time it is called.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">epoch&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">histories&lt;/span> &lt;span style="color:#000">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">X&lt;/span>, &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">image_generator&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sk_clf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">partial_fit&lt;/span>(&lt;span style="color:#000">X&lt;/span>, &lt;span style="color:#000">y&lt;/span>, &lt;span style="color:#000">verbose&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">history&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">sk_clf&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">model_&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">history&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">history&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">histories&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">append&lt;/span>(&lt;span style="color:#000">history&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">total_batches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">epoch&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">print&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c41a16">f&lt;/span>&lt;span style="color:#c41a16">&amp;#34;epoch &lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">epoch&lt;/span>&lt;span style="color:#c41a16">}&lt;/span>&lt;span style="color:#c41a16">/&lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">EPOCHS&lt;/span>&lt;span style="color:#c41a16">}&lt;/span>&lt;span style="color:#c41a16">, loss &lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">history&lt;/span>[&lt;span style="color:#c41a16">&amp;#39;loss&amp;#39;&lt;/span>][&lt;span style="color:#1c01ce">0&lt;/span>]&lt;span style="color:#c41a16">}&lt;/span>&lt;span style="color:#c41a16"> accuracy &lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">history&lt;/span>[&lt;span style="color:#c41a16">&amp;#39;accuracy&amp;#39;&lt;/span>][&lt;span style="color:#1c01ce">0&lt;/span>]&lt;span style="color:#c41a16">}&lt;/span>&lt;span style="color:#c41a16">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">epoch&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">EPOCHS&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">break&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code, we are looping over the batches generated by ImageDataGenerator() and calling partial_fit() on each batch. We are also keeping track of the history of model weights and parameters, and we are printing the loss and accuracy for each epoch. Once we have reached the specified number of epochs, the training loop will exit and the model will be trained. At this point, you can use the &lt;code>predict()&lt;/code> method to make predictions on new data, or you can continue training the model using &lt;code>partial_fit()&lt;/code> to improve its performance further.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this blog post, we have demonstrated how to use scikeras to train a TensorFlow model on a large dataset of images stored on disk. We have shown how to use &lt;code>ImageDataGenerator()&lt;/code> to load images in batches and apply real-time augmentation, how to use &lt;code>KerasClassifier()&lt;/code> to create a scikit-learn compatible interface for training the model, and how to use &lt;code>partial_fit()&lt;/code> to train the model on smaller batches of data and retain the history of model weights and parameters.&lt;/p>
&lt;p>Overall, scikeras is a convenient and effective tool for training image classification models, and it allows users to take advantage of the strengths of both TensorFlow and scikit-learn. There are many potential avenues for further improvement, such as experimenting with different model architectures, fine-tuning the training parameters, and applying more advanced augmentation techniques. We hope that this blog post has provided a useful introduction to scikeras and has given you some ideas for how to use it in your own projects.&lt;/p></description></item><item><title>Walking helps you solve difficult bugs</title><link>https://saikatkumardey.com/posts/14-walk/</link><pubDate>Wed, 15 Jun 2022 19:26:47 +0530</pubDate><guid>https://saikatkumardey.com/posts/14-walk/</guid><description>&lt;p>If you&amp;rsquo;re a programmer, you know how frustrating it can be to come across a difficult bug. These pesky little issues can derail your entire day, leaving you feeling frustrated and stuck. But did you know that going for a walk can actually help you solve these difficult bugs?&lt;/p>
&lt;p>It&amp;rsquo;s true – walking helps you think better. When you&amp;rsquo;re stuck on a problem, your mind tends to get stuck in a rut, going over the same information again and again. But when you take a walk, you give your mind a chance to wander and think about the problem in a new way.&lt;/p>
&lt;p>&lt;a href="https://news.stanford.edu/2014/04/24/walking-vs-sitting-042414/">Research&lt;/a> has shown that walking can help to boost creativity and problem-solving skills. One &lt;a href="https://www.apa.org/pubs/journals/releases/xlm-a0036577.pdf">study&lt;/a> even found that people who walked while brainstorming came up with more creative ideas than those who sat down. So the next time you&amp;rsquo;re stuck on a difficult bug, go for a walk and see if it helps.&lt;/p>
&lt;p>But why does walking help you think better? It&amp;rsquo;s all thanks to the way that our brains work. When we&amp;rsquo;re walking, our brains go into a state of &amp;ldquo;transient hypofrontality,&amp;rdquo; which means that the prefrontal cortex – the part of the brain responsible for logical thinking and decision-making – becomes less active. This allows our minds to wander and come up with new ideas and solutions.&lt;/p>
&lt;p>So the next time you&amp;rsquo;re struggling with a difficult bug, don&amp;rsquo;t just sit there and stare at your screen. Get up and go for a walk. Not only will it help you clear your mind, but it can also help you come up with new and creative solutions to even the most difficult problems. Happy coding!&lt;/p></description></item><item><title>Brave Dark Mode</title><link>https://saikatkumardey.com/posts/13-brave-dark-mode/</link><pubDate>Sun, 12 Jun 2022 12:09:19 +0530</pubDate><guid>https://saikatkumardey.com/posts/13-brave-dark-mode/</guid><description>&lt;p>Dark mode is all the rage these days, and for good reason. Not only does it look sleek and stylish, but it can also help to reduce eye strain and save battery life on devices with OLED screens. But not all browsers support dark mode by default, leaving many users to rely on extensions to enable the feature.&lt;/p>
&lt;p>However, using an extension can come with its own set of challenges. Some users may be hesitant to use an extension due to privacy concerns, or because they simply don&amp;rsquo;t want to clutter their browser with additional software. So, what&amp;rsquo;s the solution?&lt;/p>
&lt;p>If you&amp;rsquo;re using the Brave browser, you can easily enable dark mode without having to install any extensions. Simply go to brave://flags/#enable-force-dark and &amp;ldquo;Enable&amp;rdquo; the option. That&amp;rsquo;s it – no need to install any additional software or compromise your privacy.&lt;/p>
&lt;p>Once you&amp;rsquo;ve enabled dark mode in Brave, you&amp;rsquo;ll be able to enjoy all the benefits of the feature without worrying about extensions. You&amp;rsquo;ll be able to reduce eye strain, save battery life, and enjoy a sleek and stylish browsing experience. So if you&amp;rsquo;re a Brave user looking to enable dark mode, give this simple method a try – you won&amp;rsquo;t be disappointed.&lt;/p></description></item><item><title>Accuracy Is a Poor evaluation Metric</title><link>https://saikatkumardey.com/posts/accuracy-is-a-poor-error-metric/</link><pubDate>Tue, 07 Jun 2022 10:25:15 +0530</pubDate><guid>https://saikatkumardey.com/posts/accuracy-is-a-poor-error-metric/</guid><description>&lt;p>For classification problems, something like Cross-entropy is a good metric for minimizing your model&amp;rsquo;s loss.
However, we need something easier to convey to the stakeholders.
Accuracy is a very easy way to show our model performances. The caveat? Accuracy would be misleading for imbalanced classes.&lt;/p>
&lt;p>Here&amp;rsquo;s why.&lt;/p>
&lt;p>Let&amp;rsquo;s say that you&amp;rsquo;ve built a model for detecting cancer.
Here&amp;rsquo;s how the confusion matrix would look like for a dataset on cancer cases.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Predicted Cancer&lt;/th>
&lt;th>Predicted cancer-free&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Actual cancer cases&lt;/td>
&lt;td>10 (TP)&lt;/td>
&lt;td>5 (FN)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Actual cancer-free cases&lt;/td>
&lt;td>150 (FP)&lt;/td>
&lt;td>800 (TN)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The dataset has 950 cancer-free patients and 15 patients with cancer.
The accuracy of the model = fraction of correct predictions = (10 + 800) / (10 + 5 + 150 + 800) = 0.84.&lt;/p>
&lt;p>Well, the cancer cases are quite rare, so it barely has any effect on the accuracy.&lt;/p>
&lt;p>If the model had predicted every case as cancer-free, the confusion matrix would look like the following:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Predicted Cancer&lt;/th>
&lt;th>Predicted cancer-free&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Actual cancer cases&lt;/td>
&lt;td>0 (TP)&lt;/td>
&lt;td>15 (FN)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Actual cancer-free cases&lt;/td>
&lt;td>0 (FP)&lt;/td>
&lt;td>950 (TN)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Accuracy = 950/(950 + 15) = 0.984%.&lt;/p>
&lt;p>That is not what we want to report to our stakeholders.&lt;/p>
&lt;p>What are our options?&lt;/p>
&lt;p>In such cases with class imbalance, we usually look at &lt;em>precision&lt;/em> and &lt;em>recall&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Precision&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>precision = TP/(TP + FP)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Precision is &lt;em>out of all the cancer diagnosis made by the model, how many of them actually have cancer&lt;/em>. In the first case, model predicted 165 cases as having cancer but only 15 of them actually had cancer. So, the precision is 15/165 which is quite low!&lt;/p>
&lt;p>&lt;strong>Recall&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>recall = TP/(TP+FN)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Recall is &lt;em>out of all the actual cancer cases, how many could the model detect?&lt;/em>
In the first case, model detected 15 out of 20 cancer cases. So, the recall is 15/20 = 0.75. That&amp;rsquo;s not bad!&lt;/p>
&lt;p>Our objective is to detect as many cancer cases as we can (TP) while minimizing the false diagnosis of cancer (FP). In other words, we want to have high recall with high precision.&lt;/p>
&lt;p>All of these metrics rely on the probability threshold chosen to classify each sample as having cancer or not. If prediction probability &amp;gt; threshold, predict cancer.&lt;/p>
&lt;p>For example, if you choose 0.9 as the threshold, you might only classify cases where the model is highly confident ie, high precision. However, you might miss out on many cases at that threshold ie, low recall. Instead, if you keep 0.1 as the threshold, you might capture all the cancer cases but you&amp;rsquo;d be scaring a lot of other cancer-free patients with misdiagnosis as well.&lt;/p>
&lt;p>By varying the probability threshold, you could check the trade-off between precision &amp;amp; recall, also called the precision-recall curve.&lt;/p>
&lt;p>Sometimes, precision &amp;amp; recall are combined together into one metric, called F1 score.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>F1 = 2 / (1/precision + 1/recall)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s another variant of the precision-recall curve which is agnostic to the probability threshold selected. It&amp;rsquo;s called the ROC curve (Receiver Operating Characteristics). The area under the curve (AUC) is demonstrative of the overall model performance. AUC is useful to know how well the model is in classifying both the classes.&lt;/p>
&lt;p>&lt;strong>Conclusion&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Do not use accuracy metric when there&amp;rsquo;s a class imbalance.&lt;/li>
&lt;li>Use F1 or ROC-AUC instead.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Reference&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.oreilly.com/library/view/practical-machine-learning/9781098102357/">Practical Machine Learning for Computer Vision&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Precision_and_recall">Precision Recall&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">ROC Curve&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>