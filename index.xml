<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Saikat Kumar Dey</title><link>https://saikatkumardey.com/</link><description>Saikat Kumar Dey</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 01 Jun 2022 23:34:18 +0530</lastBuildDate><atom:link href="https://saikatkumardey.com/index.xml" rel="self" type="application/rss+xml"/><item><title>pre-commit hooks</title><link>https://saikatkumardey.com/daily/8-pre-commit-hooks/</link><pubDate>Wed, 01 Jun 2022 23:34:18 +0530</pubDate><guid>https://saikatkumardey.com/daily/8-pre-commit-hooks/</guid><description>&lt;p>Code smells should be identified before they&amp;rsquo;re pushed committed.&lt;/p>
&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> hooks allow you to define a standard for your codebase.&lt;/p>
&lt;p>You don&amp;rsquo;t need to worry if the latest PR follows the &lt;a href="https://peps.python.org/pep-0008/">PEP 8&lt;/a> conventions. Simply add a &lt;a href="https://github.com/PyCQA/flake8">flake8&lt;/a> hook to your pre-commit config file. Even better, add a &lt;a href="https://github.com/psf/black">black&lt;/a> config to ensure your code formatting is PEP 8 compliant.&lt;/p>
&lt;p>Adding a large-file to staging? No problem, pre-commit hooks will point it out.&lt;/p>
&lt;p>Forgot to remove debug statements in your latest patch? pre-commit hooks got you!&lt;/p>
&lt;p>Forgot to add a huge file from staging? pre-commit hook will help you!&lt;/p>
&lt;p>pre-commit hooks will prevent anyone from committing changes to your code-base with such known issues.&lt;/p>
&lt;p>It will allow the reviewers to focus on core contribution of a pull-request instead of trivial issues which could be avoided.&lt;/p>
&lt;p>What are you waiting for ? Go get yourself some &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> hooks for your freshly minted repository!&lt;/p></description></item><item><title>FIFA World Cup 2022</title><link>https://saikatkumardey.com/daily/7-world-cup-2022/</link><pubDate>Tue, 31 May 2022 23:06:43 +0530</pubDate><guid>https://saikatkumardey.com/daily/7-world-cup-2022/</guid><description>&lt;p>I got tickets to watch Brazil play in the FIFA World Cup 2022.&lt;/p>
&lt;p>This would be a dream come true. I am super excited to watch Neymar play in a stadium.&lt;/p>
&lt;p>Now, I just need to plan the logistics.&lt;/p>
&lt;p>Stay tuned for updates! :)&lt;/p></description></item><item><title>Relax</title><link>https://saikatkumardey.com/daily/6-relax/</link><pubDate>Mon, 30 May 2022 10:43:27 +0530</pubDate><guid>https://saikatkumardey.com/daily/6-relax/</guid><description>&lt;p>Some days, you&amp;rsquo;ll be pulled into so many different directions that you won&amp;rsquo;t know what to do.&lt;/p>
&lt;p>Take a step back and breathe.&lt;/p>
&lt;p>Nothing is more important than inner peace.&lt;/p>
&lt;p>Focus on one and only one thing and finish that.&lt;/p>
&lt;p>No need to multitask. Delegate it.&lt;/p></description></item><item><title>Own Your Content</title><link>https://saikatkumardey.com/daily/5-own-your-content/</link><pubDate>Sun, 29 May 2022 22:54:52 +0530</pubDate><guid>https://saikatkumardey.com/daily/5-own-your-content/</guid><description>&lt;p>Over a decade or so, I have written blog posts in different platforms scattered all over the Internet.&lt;/p>
&lt;p>What happens when those companies go out of business? All of your data would be lost unless you&amp;rsquo;ve kept a backup.&lt;/p>
&lt;p>&lt;a href="https://sive.rs/plaintext">Derek Sivers&lt;/a> recommends keeping your content on text files. Text files are cross-platform &amp;amp; easy to manage. You could easily convert them to the format of your choice. You do not need the internet to access your files. Sure, online platforms might provide a better UI. However, you don&amp;rsquo;t really need the distraction while putting down your raw thoughts.&lt;/p>
&lt;p>I have many ideas jotted down across multiple platforms, apps and yes, text files on my devices. From now on, I will use this website as my own digital garden to keep it all. I will start gathering all my posts from the past scattered across different platforms and share them in this space.&lt;/p></description></item><item><title>Never Too Late</title><link>https://saikatkumardey.com/daily/4-never-too-late/</link><pubDate>Sun, 29 May 2022 22:40:51 +0530</pubDate><guid>https://saikatkumardey.com/daily/4-never-too-late/</guid><description>&lt;p>Van Gogh started painting seriously at 27.&lt;/p>
&lt;p>He created over 2000 artworks over a decade, most of which were created in the last 2 years of his life.&lt;/p>
&lt;p>It&amp;rsquo;s never too late to start anything and become world class at it.&lt;/p>
&lt;p>Van Gogh did it. You could do it too.&lt;/p></description></item><item><title>Keep Investing</title><link>https://saikatkumardey.com/daily/3-keep-investing/</link><pubDate>Sat, 28 May 2022 21:03:26 +0530</pubDate><guid>https://saikatkumardey.com/daily/3-keep-investing/</guid><description>&lt;p>If you have money to spare, invest it.&lt;/p>
&lt;p>When the market is down, it&amp;rsquo;s giving you an opportunity to buy equity at a discount.&lt;/p>
&lt;p>Do not pick individual stocks. You&amp;rsquo;re not a trader. Invest into index funds &amp;amp; ETFs instead. Read up on &lt;a href="https://www.bogleheads.org/wiki/Getting_started">Bogleheads Philosophy&lt;/a>.&lt;/p>
&lt;p>Automate your investments. SIPs are the way to go. Time in the market is more important than timing the market.&lt;/p>
&lt;p>The real fruit of your investments will be seen years later. Let compound interest do her thing silently.&lt;/p>
&lt;p>You should focus on being the best at what you do. Worrying about the market is a waste of your time which could be utilised in honing your craft.&lt;/p>
&lt;p>When the market is up, keep buying. When the market is down, buy more.&lt;/p></description></item><item><title>What I'm doing now</title><link>https://saikatkumardey.com/now/</link><pubDate>Fri, 27 May 2022 00:58:39 +0530</pubDate><guid>https://saikatkumardey.com/now/</guid><description>&lt;h2 id="work">Work&lt;/h2>
&lt;p>I am working as a Senior Data Scientist at &lt;a href="https://www.gojek.io/">Gojek&lt;/a>.&lt;/p>
&lt;h2 id="side-projects">Side-Projects&lt;/h2>
&lt;p>I have started &lt;a href="https://pixifide.com">Pixifide&lt;/a> with my &lt;a href="https://www.linkedin.com/in/keshav-agarwal-in/">friend&lt;/a> to enhance low-resolution, blurry photos using AI.&lt;/p>
&lt;p>I have recently started building &lt;a href="https://tinymlprojects.com">Tinymlprojects&lt;/a> to share ML projects which could be quickly accomplished over a weekend. This is my way to share my experiments with different ML techniques.&lt;/p>
&lt;h2 id="writing">Writing&lt;/h2>
&lt;p>I want to become a better writer. I&amp;rsquo;ve re-designed my personal website. I have started sharing my thoughts on &lt;a href="https://saikatkumardey.com/daily/">daily posts&lt;/a>. I hope to gather momentum to write more everyday.&lt;/p>
&lt;h2 id="reading">Reading&lt;/h2>
&lt;p>I am currently reading &lt;a href="https://www.goodreads.com/book/show/10825053-life-is-short-and-so-is-this-book">Life Is Short And So Is This Book
&lt;/a> by Peter Atkins.&lt;/p>
&lt;h2 id="football">Football&lt;/h2>
&lt;p>I got tickets to the FIFA World Cup 2022. If all goes well, I will be able to see Brazil &amp;amp; Neymar play live! 😍&lt;/p>
&lt;hr>
&lt;p>&lt;em>Thanks to &lt;a href="https://sive.rs/now">Derek Sivers&lt;/a> for sharing the idea of having a now page&lt;/em>&lt;/p></description></item><item><title>Hosting on Github Pages</title><link>https://saikatkumardey.com/daily/2-hosting-on-github-pages/</link><pubDate>Fri, 27 May 2022 00:44:31 +0530</pubDate><guid>https://saikatkumardey.com/daily/2-hosting-on-github-pages/</guid><description>&lt;ul>
&lt;li>
&lt;p>Make sure you have a &lt;a href="https://github.com/saikatkumardey/saikatkumardey.github.io/blob/main/CNAME">CNAME&lt;/a> file with your custom website in it. Make sure that you have it in your &amp;ldquo;gh-pages&amp;rdquo; branch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ensure that you have configured the CNAME in your DNS provider&amp;rsquo;s console. I am using &lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>. So, I have configured 2 records&lt;/p>
&lt;ul>
&lt;li>CNAME to redirect &amp;ldquo;saikatkumardey.com&amp;rdquo; to &amp;ldquo;saikatkumardey.github.io&amp;rdquo;.&lt;/li>
&lt;li>CNAME to redirect &amp;ldquo;&lt;a href="https://www.saikatkumardey.com">www.saikatkumardey.com&lt;/a>&amp;rdquo; to &amp;ldquo;saikatkumardey.github.io&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Make sure that you set the Source of your Github Pages site to be built from the gh-pages branch. Go to Settings &amp;gt; Pages &amp;gt; Source. Check if it&amp;rsquo;s set to gh-pages. This caused me a lot of pain. It&amp;rsquo;s set to &amp;ldquo;main&amp;rdquo; by default.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Remote work</title><link>https://saikatkumardey.com/daily/1-remote-work/</link><pubDate>Thu, 26 May 2022 08:29:24 +0530</pubDate><guid>https://saikatkumardey.com/daily/1-remote-work/</guid><description>&lt;h3 id="remote-work-set-up-is-good">Remote work set-up is good.&lt;/h3>
&lt;p>You get to be with your family.&lt;/p>
&lt;p>You get to save a lot on rent, commute and overall high cost of living.&lt;/p>
&lt;p>You could do &lt;a href="https://www.calnewport.com/books/deep-work/">deep work&lt;/a>. Tuning out all the notifications is easy. You could focus on getting things done.&lt;/p>
&lt;hr>
&lt;h3 id="remote-work-set-up-is-bad">Remote work set-up is bad.&lt;/h3>
&lt;p>You don&amp;rsquo;t get to meet your team-mates regularly.&lt;/p>
&lt;p>Building trust takes a longer time.&lt;/p>
&lt;p>You&amp;rsquo;re not fully engaged with the company.&lt;/p>
&lt;p>Brainstorming with your colleagues is not seamless. In office, you could just walk up to their desk and ask for their suggestion.&lt;/p>
&lt;hr>
&lt;p>Hybrid work set-up is the way. We need the flexibility to do &amp;ldquo;deep work&amp;rdquo; from home most of the times as well as to meet our team every couple of months.&lt;/p></description></item><item><title>Building Pandas Dataframes From Ndarrays</title><link>https://saikatkumardey.com/essays/building-pandas-dataframes-from-ndarrays/</link><pubDate>Tue, 28 Sep 2021 10:06:23 +0530</pubDate><guid>https://saikatkumardey.com/essays/building-pandas-dataframes-from-ndarrays/</guid><description>&lt;p>At work, I have to switch between numpy &amp;amp; pandas depending on the computational needs. Numpy is faster. Pandas is easier to work with.&lt;/p>
&lt;p>One of the tasks I&amp;rsquo;ve faced often was to convert a 3-dimensional ndarray to a pandas dataframe. I will share my preferred technique in this post today.&lt;/p>
&lt;p>For the purpose of this exercise, I&amp;rsquo;ll generate dummy sales data for a retail company. The dimensions include products, locations, and sales.&lt;/p>
&lt;h1 id="convert-ndarray-to-pandas-dataframe">Convert ndarray to pandas dataframe&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">import&lt;/span> pandas &lt;span style="color:#719e07">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">import&lt;/span> numpy &lt;span style="color:#719e07">as&lt;/span> np
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1d--dimension--sales">1d : dimension = sales&lt;/h2>
&lt;p>Let&amp;rsquo;s start with 1d data. What if we only had sales info for all products and locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_1d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_1d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[9 3 6]
&lt;/code>&lt;/pre>
&lt;p>That&amp;rsquo;s easy. Ideally, 1-d information should be represented as a Series.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_1d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_1d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_1d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
0 9
1 3
2 6
&lt;/code>&lt;/pre>
&lt;h2 id="2d-dimension--sales--product">2d: dimension = sales * product&lt;/h2>
&lt;p>Let&amp;rsquo;s move on to 2 dimensions. Now, we have data corresponding to different products.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_2d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_2d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[4 6]
[8 1]
[2 7]]
&lt;/code>&lt;/pre>
&lt;p>Pandas DataFrame can handle 2-D ndarrays out of the box.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_2d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_2d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])&lt;span style="color:#719e07">.&lt;/span>set_index(&lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_2d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
product
4 6
8 1
2 7
&lt;/code>&lt;/pre>
&lt;h2 id="3d--dimension--location-x-product-x-sales">3d : dimension = location x product x sales&lt;/h2>
&lt;p>Now, what if we have a ndarray corresponding to all products for several locations?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># failure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr_3d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[9]
[6]
[2]]
[[1]
[4]
[4]]
[[2]
[5]
[6]]
[[9]
[6]
[5]]
[[1]
[6]
[1]]]
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># the following raises ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># pandas DataFrame expects a 2-d input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pandas won&amp;rsquo;t work out of the box. It cannot handle more than 2 dimensions. So, it raises a &lt;code>ValueError&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bas" data-lang="bas">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueError Traceback (most recent call last)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">/&lt;/span>var&lt;span style="color:#719e07">/&lt;/span>folders&lt;span style="color:#719e07">/&lt;/span>jq&lt;span style="color:#719e07">/&lt;/span>ksxbjg7d58g9v9rrcl0f38380000gn&lt;span style="color:#719e07">/&lt;/span>T&lt;span style="color:#719e07">/&lt;/span>ipykernel_12628&lt;span style="color:#719e07">/&lt;/span>&lt;span style="color:#2aa198">1531564731&lt;/span>&lt;span style="color:#719e07">.&lt;/span>py in &lt;span style="color:#719e07">&amp;lt;&lt;/span>module&lt;span style="color:#719e07">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">1&lt;/span> # the following raises ValueError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">2&lt;/span> # pandas DataFrame expects a &lt;span style="color:#2aa198">2&lt;/span>&lt;span style="color:#719e07">-&lt;/span>d input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">----&amp;gt;&lt;/span> &lt;span style="color:#2aa198">3&lt;/span> df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueError: Must pass &lt;span style="color:#2aa198">2&lt;/span>&lt;span style="color:#719e07">-&lt;/span>d input&lt;span style="color:#719e07">.&lt;/span> shape&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The solution?&lt;/p>
&lt;p>&lt;code>MultiIndex&lt;/code>.&lt;/p>
&lt;p>Assuming that the ndarray is ordered by location/products, we could prepare a multi-index, flatten our ndarray and let Pandas reshape it according to the provided index.&lt;/p>
&lt;p>Sweet!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>index &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>MultiIndex&lt;span style="color:#719e07">.&lt;/span>from_product(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#b58900">range&lt;/span>(dim) &lt;span style="color:#719e07">for&lt;/span> dim &lt;span style="color:#719e07">in&lt;/span> arr_3d&lt;span style="color:#719e07">.&lt;/span>shape[:&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>]],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> names&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(arr_3d&lt;span style="color:#719e07">.&lt;/span>flatten(), index&lt;span style="color:#719e07">=&lt;/span>index, columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> sales
location product
0 0 9
1 6
2 2
1 0 1
1 4
2 4
2 0 2
1 5
2 6
3 0 9
1 6
2 5
4 0 1
1 6
2 1
&lt;/code>&lt;/pre>
&lt;p>We just have sales corresponding to each location and product. What if the final &lt;code>sales&lt;/code> dimension includes sales for yesterday/today (or for every month, every week, etc.) ?&lt;/p>
&lt;h2 id="3d--dimension--location-x-product-x-sales-multi">3d : dimension = location x product x sales (multi)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr_3d &lt;span style="color:#719e07">=&lt;/span> np&lt;span style="color:#719e07">.&lt;/span>random&lt;span style="color:#719e07">.&lt;/span>randint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> low&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size&lt;span style="color:#719e07">=&lt;/span>(&lt;span style="color:#2aa198">5&lt;/span>, &lt;span style="color:#2aa198">3&lt;/span>, &lt;span style="color:#2aa198">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(arr_3d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>MultiIndex&lt;span style="color:#719e07">.&lt;/span>from_product(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#b58900">range&lt;/span>(dim) &lt;span style="color:#719e07">for&lt;/span> dim &lt;span style="color:#719e07">in&lt;/span> arr_3d&lt;span style="color:#719e07">.&lt;/span>shape],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> names&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;location&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;product&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>[[[1 9]
[8 6]
[9 4]]
[[4 9]
[3 9]
[1 8]]
[[5 2]
[9 9]
[1 9]]
[[4 5]
[7 4]
[7 7]]
[[6 9]
[4 2]
[7 1]]]
&lt;/code>&lt;/pre>
&lt;p>No major changes. Pandas should handle it just like before. Just unstack the sales dimension and rename the columns for readability.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> pd&lt;span style="color:#719e07">.&lt;/span>DataFrame(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_3d&lt;span style="color:#719e07">.&lt;/span>flatten(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#719e07">=&lt;/span>index,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> columns&lt;span style="color:#719e07">=&lt;/span>[&lt;span style="color:#2aa198">&amp;#34;sales&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_3d &lt;span style="color:#719e07">=&lt;/span> df_3d&lt;span style="color:#719e07">.&lt;/span>unstack(&lt;span style="color:#719e07">-&lt;/span>&lt;span style="color:#2aa198">1&lt;/span>)&lt;span style="color:#719e07">.&lt;/span>rename(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> columns&lt;span style="color:#719e07">=&lt;/span>{&lt;span style="color:#2aa198">0&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;yesterday&amp;#34;&lt;/span>, &lt;span style="color:#2aa198">1&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;today&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">print&lt;/span>(df_3d)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> sales yesterday today
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0 0 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 8 6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 9 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 0 4 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 3 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 0 5 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 9 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 1 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3 0 4 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 7 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 4 0 6 9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 4 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 7 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Do you know of other ways to switch between ndarray and DataFrame? Comment below :)&lt;/p></description></item></channel></rss>